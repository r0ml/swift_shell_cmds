
// Generated by Robert M. Lefkowitz <r0ml@liberally.net> in 2024 using ChatGPT
// from a file containing the following notice:

/*
 * Copyright (c) 1997 Brian Somers <brian@Awfulhak.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

import time_h

extension Date {

  func domktime(_ t: inout tm, _ type: Character) -> Int {
    var ret: time_t = 0

    while true {
      ret = mktime(&t)
      if ret == -1 && t.tm_year > 68 && t.tm_year < 138 {
        adjhour(&t, type == "-" ? type : "+", 1, 0)
      } else {
        break
      }

    }
    return ret
  }

  func transf(_ t: [trans], _ arg: String) -> Int {
    for f in 0..<t.count {
      if t[f].str.lowercased().hasPrefix(arg.lowercased()) || t[f].str.lowercased() == arg.lowercased() {
        return t[f].val
      }
    }

    return -1
  }

  typealias Vary = [String]

  func daysinmonth(_ t: tm) -> Int {
    let year: Int = Int(t.tm_year) + 1900

    if t.tm_mon == 1 {
      if year % 400 == 0 {
        return 29
      } else if year % 100 == 0 {
        return 28
      } else if year % 4 == 0 {
        return 29
      } else {
        return 28
      }
    } else if t.tm_mon >= 0 && t.tm_mon < 12 {
      return mdays[Int(t.tm_mon)]
    }

    return 0
  }

  func adjyear(_ t: inout tm, _ type: Character, _ val: Int, _ mk: Int) -> Bool {
    switch type {
      case "+":
        t.tm_year += Int32(val)
      case "-":
        t.tm_year -= Int32(val)
      default:
        t.tm_year = Int32(val)
        if t.tm_year < 69 {
          t.tm_year += 100
        } else if t.tm_year > 1900 {
          t.tm_year -= 1900
        }
    }
    return mk == 0 || domktime(&t, type) != -1
  }

  func adjmon(_ t: inout tm, _ type: Character, _ valx: Int, _ istext: Int, _ mk: Int) -> Bool {
    var lmdays: Int
    var val = valx

    if val < 0 {
      return false
    }

    switch type {
      case "+":
        if istext != 0 {
          if val <= t.tm_mon {
            val += 11 - Int(t.tm_mon)
          } else {
            val -= Int(t.tm_mon) + 1
          }
        }
        if val != 0 {
          if !adjyear(&t, "+", (Int(t.tm_mon) + val) / 12, 0) {
            return false
          }
          val %= 12
          t.tm_mon += Int32(val)
          if t.tm_mon > 11 {
            t.tm_mon -= 12
          }
        }
      case "-":
        if istext != 0 {
          if val - 1 > t.tm_mon {
            val = 13 - val + Int(t.tm_mon)
          } else {
            val = Int(t.tm_mon) - val + 1
          }
        }
        if val != 0 {
          if !adjyear(&t, "-", val / 12, 0) {
            return false
          }
          val %= 12
          if val > t.tm_mon {
            if !adjyear(&t, "-", 1, 0) {
              return false
            }
            val -= 12
          }
          t.tm_mon -= Int32(val)
        }
      default:
        if val > 12 || val < 1 {
          return false
        }
        t.tm_mon = Int32(val) - 1
    }

    lmdays = daysinmonth(t)
    if t.tm_mday > lmdays {
      t.tm_mday = Int32(lmdays)
    }

    return mk == 0 || domktime(&t, type) != -1
  }

  func adjday(_ t: inout tm, _ type: Character, _ valx: Int, _ mk: Int) -> Bool {
    var lmdays: Int
    var val = valx

    switch type {
      case "+":
        while val != 0 {
          lmdays = daysinmonth(t)
          if val > lmdays - Int(t.tm_mday) {
            val -= lmdays - Int(t.tm_mday) + 1
            t.tm_mday = 1
            if !adjmon(&t, "+", 1, 0, 0) {
              return false
            }
          } else {
            t.tm_mday += Int32(val)
            val = 0
          }
        }
      case "-":
        while val != 0 {
          if val >= t.tm_mday {
            val -= Int(t.tm_mday)
            t.tm_mday = 1
            if !adjmon(&t, "-", 1, 0, 0) {
              return false
            }
            t.tm_mday = Int32(daysinmonth(t))
          } else {
            t.tm_mday -= Int32(val)
            val = 0
          }
        }
      default:
        if val > 0 && val <= daysinmonth(t) {
          t.tm_mday = Int32(val)
        } else {
          return false
        }
    }

    return mk == 0 || domktime(&t, type) != -1
  }

  func adjwday(_ t: inout tm, _ type: Character, _ valx: Int, _ istext: Int, _ mk: Int) -> Bool {
    var val = valx

    if val < 0 {
      return false
    }

    switch type {
      case "+":
        if istext != 0 {
          if val < t.tm_wday {
            val = 7 - Int(t.tm_wday) + val
          } else {
            val -= Int(t.tm_wday)
          }
        } else {
          val *= 7
        }
        return val == 0 || adjday(&t, "+", val, mk)
      case "-":
        if istext != 0 {
          if val > t.tm_wday {
            val = 7 - val + Int(t.tm_wday)
          } else {
            val = Int(t.tm_wday) - val
          }
        } else {
          val *= 7
        }
        return val == 0 || adjday(&t, "-", val, mk)
      default:
        if val < t.tm_wday {
          return adjday(&t, "-", Int(t.tm_wday) - val, mk)
        } else if val > 6 {
          return false
        } else if val > t.tm_wday {
          return adjday(&t, "+", val - Int(t.tm_wday), mk)
        }
    }
    return true
  }

  @discardableResult func adjhour(_ t: inout tm, _ type: Character, _ valx: Int, _ mk: Int) -> Bool {
    var val = valx

    if val < 0 {
      return false
    }

    switch type {
      case "+":
        if val != 0 {
          var days: Int
          days = (Int(t.tm_hour) + val) / 24
          val %= 24
          t.tm_hour += Int32(val)
          t.tm_hour %= 24
          if !adjday( &t, "+", days, 0) {
            return false
          }
        }
      case "-":
        if val != 0 {
          var days: Int
          days = val / 24
          val %= 24
          if val > t.tm_hour {
            days += 1
            val -= 24
          }
          t.tm_hour -= Int32(val)
          if !adjday( &t, "-", days, 0) {
            return false
          }
        }
      default:
        if val > 23 {
          return false
        }
        t.tm_hour = Int32(val)
    }

    return mk == 0 || domktime( &t, type) != -1
  }

  func adjmin(t: inout tm, type: Character, valx: Int, mk: Int) -> Bool {
    var val = valx

    if val < 0 {
      return false
    }

    switch type {
      case "+":
        if val != 0 {
          if !adjhour( &t, "+", (Int(t.tm_min) + val) / 60, 0) {
            return false
          }
          val %= 60
          t.tm_min += Int32(val)
          if t.tm_min > 59 {
            t.tm_min -= 60
          }
        }
      case "-":
        if val != 0 {
          if !adjhour( &t, "-", val / 60, 0) {
            return false
          }
          val %= 60
          if val > t.tm_min {
            if !adjhour(&t, "-", 1, 0) {
              return false
            }
            val -= 60
          }
          t.tm_min -= Int32(val)
        }
      default:
        if val > 59 {
          return false
        }
        t.tm_min = Int32(val)
    }

    return mk == 0 || domktime( &t, type) != -1
  }

  func adjsec(t: inout tm, type: Character, valx: Int, mk: Int) -> Bool {
    var val = valx

    if val < 0 {
      return false
    }

    switch type {
      case "+":
        if val != 0 {
          if !adjmin(t: &t, type: "+", valx: (Int(t.tm_sec) + val) / 60, mk: 0) {
            return false
          }
          val %= 60
          t.tm_sec += Int32(val)
          if t.tm_sec > 59 {
            t.tm_sec -= 60
          }
        }
      case "-":
        if val != 0 {
          if !adjmin(t: &t, type: "-", valx: val / 60, mk: 0) {
            return false
          }
          val %= 60
          if val > t.tm_sec {
            if !adjmin(t: &t, type: "-", valx: 1, mk: 0) {
              return false
            }
            val -= 60
          }
          t.tm_sec -= Int32(val)
        }
      default:
        if val > 59 {
          return false
        }
        t.tm_sec = Int32(val)
    }

    return mk == 0 || domktime(&t, type) != -1
  }

  func vary_apply(_ vx: Vary, _ t: inout tm) -> Vary? {
    var type: Character
    var which: Character
    var arg: String
    var len: Int
    var val: Int

    var currentVary = vx

    while !currentVary.isEmpty {
      let current = currentVary.removeFirst()

      type = current.first!
      arg = current

      if type == "+" || type == "-" {
        arg.removeFirst()
      } else {
        type = "\0"
      }
      len = arg.count
      if len < 2 {
        return currentVary
      }

      if type == "\0" {
        t.tm_isdst = -1
      }

      if arg.dropLast().allSatisfy({ "0"..."9" ~= $0 }) {
        val = Int(arg)!
        which = arg.last!

        switch which {
          case "S":
            if !adjsec(t: &t, type: type, valx: val, mk: 1) {
              return currentVary
            }
          case "M":
            if !adjmin(t: &t, type: type, valx: val, mk: 1) {
              return currentVary
            }
          case "H":
            if !adjhour( &t,  type, val, 1) {
              return currentVary
            }
          case "d":
            t.tm_isdst = -1
            if !adjday( &t, type, val, 1) {
              return currentVary
            }
          case "w":
            t.tm_isdst = -1
            if !adjwday( &t, type, val, 0, 1) {
              return currentVary
            }
          case "m":
            t.tm_isdst = -1
            if !adjmon( &t, type, val, 0, 1) {
              return currentVary
            }
          case "y":
            t.tm_isdst = -1
            if !adjyear( &t,  type, val, 1) {
              return currentVary
            }
          default:
            return currentVary
        }
      } else {
        let transWday = transf(trans_wday, arg)
        if transWday != -1 {
          if !adjwday( &t, type, transWday, 1, 1) {
            return currentVary
          }
        } else {
          let transMon = transf(trans_mon, arg)
          if transMon != -1 {
            if !adjmon( &t, type, transMon, 1, 1) {
              return currentVary
            }
          } else {
            return currentVary
          }
        }
      }
    }
    return nil
  }
}
