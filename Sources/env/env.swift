
// Generated by Robert M. Lefkowitz <r0ml@liberally.net> in 2024 using ChatGPT
// from a file containing the following notice:

/*
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 1988, 1993, 1994
 *  The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

import CMigration

// FIXME: there are no tests for this target
@main final class Env : ShellCommand {
    // from envopts.swift
    var env_verbosity : Int = 0
 
  var environ: [String:String] = Environment.getenv()

    var usage = """
usage: env [-0iv] [-C workdir] [-P utilpath] [-S string]
           [-u name] [name=value ...] [utility [argument ...]]
"""

  struct CommandOptions {
    var aa : [String] = []
    var altpath: String? = nil
    var term: Character = "\n"
  }
    
  enum ExitCode : Int {
    case EXIT_CANCELED = 125
    case EXIT_CANNOT_INVOKE = 126
    case EXIT_ENOENT = 127
  }

  func parseOptions() throws(CmdErr) -> CommandOptions {
    var opts = CommandOptions()
    var se = FileDescriptor.standardError

    let j = CommandLine.arguments
 //   let k = j.joined(separator: " ")

    var want_clear = false

    let go = BSDGetopt("-0iP:S:u:v")
    /* The nastiness here is that the -S option can mutate the CommandLine arguments in use */
    while let (ch, optarg) = try go.getopt() {
      
      switch ch {
      case "-":
        fallthrough
      case "i":
        want_clear = true
      case "0":
          opts.term = "\0"
      case "P":
          opts.altpath = optarg
      case "S":
          try opts.aa.append(contentsOf: splitSpaces(optarg))
      case "u":
        if env_verbosity != 0 {
          print("#env unset:\(optarg)", to: &se)
        }
          do {
            try Environment.unsetenv(optarg)
          } catch(let e) {
            throw CmdErr(1, "unsetenv \(optarg) \(e)")
        }
      case "v":
        env_verbosity += 1
        if env_verbosity > 1 {
          print("#env verbosity now at \(env_verbosity)", to: &se)
        }
      case "?":
        fallthrough
      default:
        throw CmdErr(1)
      }
    }
    
    if want_clear {
      environ = [:]
      if env_verbosity != 0 {
        print("#env clearing environ", to: &se)
      }
    }
    
    opts.aa.append(contentsOf: go.remaining)
    return opts
  }
  
  func runCommand(_ opts : CommandOptions) async throws(CmdErr) {

    var se = FileDescriptor.standardError

    // FIXME: need to remove the setenv args from opts.aa
    for argv in opts.aa {
      if let p = argv.firstIndex(of: "=") {
        if env_verbosity != 0 {
          print("#env setenv:\(argv)", to: &se)
        }
        let key = String(argv[..<p])
        let value = String(argv[argv.index(after: p)...])
        do {
          try Environment.setenv(key, value)
        } catch(let e) {
          throw CmdErr(1, "setenv \(key) \(e)")
        }
      }
    }
    
    if opts.aa.isEmpty {
      for ep in environ {
        print("\(ep.0)=\(ep.1)", terminator: String(opts.term))
      }

      // FIXME: do I need this?
      /*
#if os(macOS)
      if Darwin.ferror(stdout) != 0 || fflush(stdout) != 0 {
        err(1, "stdout")
      }
#endif
      */

      return
    } else {
      let oargv = opts.aa.first! // CommandLine.arguments[Int(optind)]
      var argv = oargv
      if opts.term == "\0" {
        err( ExitCode.EXIT_CANCELED.rawValue, "cannot specify command with -0")
      }
      if let altpath = opts.altpath {
        argv = search_paths(altpath, argv)
      } else {
        argv = searchPath(for: argv) ?? argv
      }
      if env_verbosity != 0 {
        print("#env executing:  \(oargv)", to: &se)
        for (argc, parg) in opts.aa.enumerated() {
          print("#env    arg[\(argc)]=  '\(parg)'", to: &se)
        }
        if env_verbosity > 1 {
          try? await Task.sleep(nanoseconds: 1_000_000_000_000)
        }
      }
      
 //     let pe = execvp(argv, Array(opts.aa) )

      do {
        let p = ProcessRunner(command: argv, arguments: Array(opts.aa.dropFirst()))
        try await p.run(captureStdout: false, captureStderr: false)
      } catch {
        throw CmdErr(127, "\(error)")
      }

//      throw CmdErr((pe.code == ENOENT ? ExitCode.EXIT_ENOENT : ExitCode.EXIT_CANNOT_INVOKE).rawValue, argv)
    }
  }
  
}
