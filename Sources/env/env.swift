
// Generated by Robert M. Lefkowitz <r0ml@liberally.net> in 2024 using ChatGPT
// from a file containing the following notice:

/*
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 1988, 1993, 1994
 *  The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

import Foundation
import CMigration
import os

@main final class Env : ShellCommand {
    // from envopts.swift
    var env_verbosity : Int = 0
 
    var environ: [String:String] = ProcessInfo.processInfo.environment

    var usage = "usage: env [-0iv] [-P utilpath] [-S string] [-u name]\n[name=value ...] [utility [argument ...]]"

  struct CommandOptions {
    var aa : [String] = []
    var rtrn: Int32 = 0
    var altpath: String? = nil
    var term: Character = "\n"
  }
    
  enum ExitCode : Int {
    case EXIT_CANCELED = 125
    case EXIT_CANNOT_INVOKE = 126
    case EXIT_ENOENT = 127
  }

  func parseOptions() throws(CmdErr) -> CommandOptions {
    var opts = CommandOptions()
    
    let log = Logger.init(subsystem: "env", category: "main")
    
    let j = CommandLine.arguments
    let k = j.joined(separator: " ")
    log.debug("env: \(k, privacy: .public)")
    
    var want_clear: Int = 0
    
    
    let go = BSDGetopt("-0iP:S:u:v")
    /* The nastiness here is that the -S option can mutate the CommandLine arguments in use */
    while let (ch, optarg) = try go.getopt() {
      
      switch ch {
      case "-":
        fallthrough
      case "i":
        want_clear = 1
      case "0":
          opts.term = "\0"
      case "P":
          opts.altpath = optarg
      case "S":
        let opta = optarg
        // FIXME: figure out how to put this back
        // splitSpaces(optarg, &optind)
      case "u":
        if env_verbosity != 0 {
          Darwin.fputs("#env unset:\(optarg)\n", Darwin.stderr)
        }
          opts.rtrn = unsetenv(optarg)
          if opts.rtrn == -1 {
          err(Int(EXIT_FAILURE), "unsetenv \(optarg)")
        }
      case "v":
        env_verbosity += 1
        if env_verbosity > 1 {
          Darwin.fputs("#env verbosity now at \(env_verbosity)\n", Darwin.stderr)
        }
      case "?":
        fallthrough
      default:
        throw CmdErr(1)
      }
    }
    
    if want_clear != 0 {
      environ = [:]
      if env_verbosity != 0 {
        Darwin.fputs("#env clearing environ\n", Darwin.stderr)
      }
    }
    
    opts.aa = go.remaining
    return opts
  }
  
  func runCommand(_ opts : CommandOptions) throws(CmdErr) {
    var rtrn = opts.rtrn
    for argv in opts.aa {
      if let p = argv.firstIndex(of: "=") {
        if env_verbosity != 0 {
          Darwin.fputs("#env setenv:\(argv)\n", Darwin.stderr)
        }
        let key = String(argv[..<p])
        let value = String(argv[argv.index(after: p)...])
        rtrn = setenv(key, value, 1)
        if rtrn == -1 {
          err(Int(Darwin.EXIT_FAILURE), "setenv \(key)")
        }
      }
    }
    
    if opts.aa.isEmpty {
      for ep in environ {
        print("\(ep.0)=\(ep.1)", terminator: String(opts.term))
      }
      
#if os(macOS)
      if Darwin.ferror(stdout) != 0 || fflush(stdout) != 0 {
        err(1, "stdout")
      }
#endif
      
      exit(0)
    } else {
      var argv = opts.aa.first! // CommandLine.arguments[Int(optind)]
      if opts.term == "\0" {
        err( ExitCode.EXIT_CANCELED.rawValue, "cannot specify command with -0")
      }
      if let altpath = opts.altpath {
        argv = search_paths(altpath, argv)
      }
      if env_verbosity != 0 {
        Darwin.fputs("#env executing:\(argv)\n", Darwin.stderr)
        for (argc, parg) in opts.aa.dropFirst().enumerated() {
          Darwin.fputs("#env    arg[\(argc)]=\(parg)\n", Darwin.stderr)
        }
        if env_verbosity > 1 {
          Darwin.sleep(1)
        }
      }
      
//      execvp(argv, CommandLine.unsafeArgv.advanced(by: Int(optind)))
      let az = opts.aa.map { $0.withCString { Darwin.strdup($0) } } + [UnsafeMutablePointer<CChar>.init(bitPattern: 0)]
      Darwin.execvp(argv, az )
      err( (errno == ENOENT ? ExitCode.EXIT_ENOENT : ExitCode.EXIT_CANNOT_INVOKE).rawValue, argv)
      
    }
  }
}
