
// Generated by Robert M. Lefkowitz <r0ml@liberally.net> in 2024 using ChatGPT
// from a file containing the following notice:

/*
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 1990, 1993
 *  The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Cimarron D. Taylor of the University of California, Berkeley.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

import Foundation
import shared

extension find {
  
  /*
   * yanknode --
   *  destructively removes the top from the plan
   */
  func yanknode(_ p : inout ArraySlice<PLAN>) -> PLAN? {
    if let _ = p.first {
      return p.removeFirst()
    } else {
      return nil
    }
  }
  
  /*
   * yankexpr --
   *  Removes one expression from the plan.  This is used mainly by
   *  paren_squish.  In comments below, an expression is either a
   *  simple node or a f_expr node containing a list of simple nodes.
   */
  func yankexpr(_ planp : inout ArraySlice<PLAN>) -> PLAN? {
    
    /* first pull the top node from the plan */
    guard var node = yanknode(&planp) else { return nil }
    
    /*
     * If the node is an '(' then we recursively slurp up expressions
     * until we find its associated ')'.  If it's a closing paren we
     * just return it and unwind our recursion; all other nodes are
     * complete expressions, so just return them.
     */
    if node.name == "(" {
      var subplan : [PLAN] = []
      while true {
        guard let next = yankexpr(&planp) else {
          errx(1, "(: missing closing ')'");
          fatalError("i exited above")
        }
        /*
         * If we find a closing ')' we store the collected
         * subplan in our '(' node and convert the node to
         * a f_expr.  The ')' we found is ignored.  Otherwise,
         * we just continue to add whatever we get to our
         * subplan.
         */
        if next.name == ")" {
          if subplan.isEmpty {
            errx(1, "(): empty inner expression");
          }
          node.p_un = .p_data(subplan, [])
          node.option = OPTION("**expr**", node.option.create, f_expr, node.option.flags)
          //        node.execute = f_expr;
          break;
        } else {
          subplan.append(next)
        }
      }
    }
    return (node);
  }
  
  /*
   * paren_squish --
   *  replaces "parenthesized" plans in our search plan with "expr" nodes.
   */
  func paren_squish(_ plan : ArraySlice<PLAN>) -> [PLAN] {
    var result : [PLAN] = []  /* pointer to head of result plan */
    
    var planx = plan
    /*
     * the basic idea is to have yankexpr do all our work and just
     * collect its results together.
     */
    
    while let expr = yankexpr(&planx) {
      /*
       * if we find an unclaimed ')' it means there is a missing
       * '(' someplace.
       */
      if (expr.name == ")") {
        errx(1, "): no beginning '('");
      }
      
      /* add the expression to our result plan */
      result.append(expr)
    }
    return (result);
  }
  
  /*
   * not_squish --
   *  compresses "!" expressions in our search plan.
   */
  func not_squish(_ planx : [PLAN]) -> [PLAN] {
    var result : [PLAN] = [] /* pointer to head of result plan */
    var plan = ArraySlice(planx)
    
    while var next = yanknode(&plan) {
      /*
       * if we encounter a ( expression ) then look for nots in
       * the expr subplan.
       */
      if next.name == "**expr**",
         case let .p_data(nd, _) = next.p_un {
        next.p_un = .p_data(not_squish(nd), [])
      }
      
      /*
       * if we encounter a not, then snag the next node and place
       * it in the not's subplan.  As an optimization we compress
       * several not's to zero or one not.
       */
      if (next.name == "!" || next.name == "-not") {
        var notlevel = 1;
        
        var node = yanknode(&plan);
        while node != nil && (node!.name == "!" || node!.name == "-not") {
          notlevel += 1
          node = yanknode(&plan)
        }
        guard var node else {
          errx(1, "!: no following expression")
          fatalError("exited in the previous statement")
        }
        if (node.name == "-o" || node.name == "-or") {
          errx(1, "!: nothing between ! and -o");
        }
        
        /*
         * If we encounter ! ( expr ) then look for nots in
         * the expr subplan.
         */
        if node.name == "**expr**",
           case let .p_data(nd, _) = node.p_un {
          node.p_un = .p_data(not_squish(nd), [])
        }
        if (notlevel % 2 != 1) {
          next = node;
        }
        else {
          // FIXME: it was node, now [node]
          next.p_un = .p_data([node], [])
        }
      }
      
      /* add the node to our result plan */    result.append(next)
      
    }
    return (result);
  }
  
  /*
   * or_squish --
   *  compresses -o expressions in our search plan.
   */
  func or_squish(_ planx : [PLAN]) -> [PLAN] {
    var result : [PLAN] = []/* pointer to head of result plan */
    var plan = ArraySlice(planx)
    while var next = yanknode(&plan) {
      /*
       * if we encounter a ( expression ) then look for or's in
       * the expr subplan.
       */
      if next.name == "**expr**",
         case let .p_data(nd, _) = next.p_un {
        next.p_un = .p_data(or_squish(nd), [])
      }
      
      /* if we encounter a not then look for or's in the subplan */
      if next.name == "!" || next.name == "-not",
         case let .p_data(od, _) = next.p_un {
        next.p_un = .p_data(or_squish(od), [])
      }
      
      /*
       * if we encounter an or, then place our collected plan in the
       * or's first subplan and then recursively collect the
       * remaining stuff into the second subplan and return the or.
       */
      if (next.name == "-o" || next.name == "-or") {
        if result.isEmpty {
          errx(1, "-o: no expression before -o");
        }
        let q = or_squish(Array(plan))
        next.p_un = .p_data(result, q)
        if (q == nil) {
          errx(1, "-o: no expression after -o");
        }
        // FIXME: was next, now [next]
        return [next]
      }
      
      /* add the node to our result plan */
      result.append(next)
    }
    return result
  }
}
