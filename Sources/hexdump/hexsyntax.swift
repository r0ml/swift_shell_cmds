
// Generated by Robert M. Lefkowitz <r0ml@liberally.net> in 2024 using ChatGPT
// from a file containing the following notice:

/*
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 1990, 1993
 *  The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

import CMigration

import Darwin

extension hexdump {
  func newsyntax(_ opts : inout CommandOptions) throws {
    
    // See if the command was called as "hd" -- which implies "-C"
    let farg = CommandLine.arguments[0]
    if farg.hasSuffix("hd") {
      /* "Canonical" format, implies -C. */
      add("\"%08.8_Ax\n\"")
      add("\"%08.8_ax  \" 8/1 \"%02x \" \"  \" 8/1 \"%02x \" ")
      add("\"  |\" 16/1 \"%_p\" \"|\\n\"")
    }
    
    let go = BSDGetopt("bcCde:f:n:os:vx")
    
      while let (ch, optarg) = try go.getopt() {
      
//      let chx = getopt(argc, argv, "bcCde:f:n:os:vx")
//      if chx == EOF { break }
//      let ch = Character.from(UInt8(chx))
      switch (ch) {
      case "b":
        add("\"%07.7_Ax\n\"")
        add("\"%07.7_ax \" 16/1 \"%03o \" \"\\n\"")
      case "c":
        add("\"%07.7_Ax\n\"")
        add("\"%07.7_ax \" 16/1 \"%3_c \" \"\\n\"")
      case "C":
        add("\"%08.8_Ax\n\"")
        add("\"%08.8_ax  \" 8/1 \"%02x \" \"  \" 8/1 \"%02x \" ")
        add("\"  |\" 16/1 \"%_p\" \"|\\n\"")
      case "d":
        add("\"%07.7_Ax\n\"")
        add("\"%07.7_ax \" 8/2 \"  %05u \" \"\\n\"")
      case "e":
        add(optarg)
      case "f":
        try addfile(optarg)
      case "n":
        let oa = optarg
        if let length = Int(oa) {
          if length < 0 {
            errx(1, "\(oa): bad length value")
          } else {
            self.length = length
          }
        }
      case "o":
        add("\"%07.7_Ax\n\"")
        add("\"%07.7_ax \" 8/2 \" %06o \" \"\\n\"")
      case "s":
        var p : UnsafeMutablePointer<CChar>?
        let oa = optarg
        var lskip = strtoll(optarg, &p, 0)
        if lskip < 0 {
          errx(1, "\(oa): bad skip value")
        }
        if let p {
          let pp = Character.from(p.pointee)
          switch(pp) {
          case "b":
            lskip *= 512
          case "k":
            lskip *= 1024
          case "m":
            lskip *= 1048576
          case "g":
            lskip *= 1073741824
          default:
            break
          }
        }
        skip = lskip
      case "v":
          opts.vflag = .ALL
      case "x":
        add("\"%07.7_Ax\n\"")
        add("\"%07.7_ax \" 8/2 \"   %04x \" \"\\n\"")
      case "?":
        throw CmdErr(1)
      default:
        break
      }
    }
    
    if fsArray.count == 0 {
      add("\"%07.7_Ax\n\"")
      add("\"%07.7_ax \" 8/2 \"%04x \" \"\\n\"")
    }
    
      opts.args = ArraySlice(go.remaining)
  }
                                   
  
}
