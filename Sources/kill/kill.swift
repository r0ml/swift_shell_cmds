
// Generated by Robert M. Lefkowitz <r0ml@liberally.net> in 2024 using ChatGPT
// from a file containing the following notice:

/*
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 1988, 1993, 1994
 *  The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

import Foundation
import shared

@main class killCommand {
  #if os(macOS) || os(iOS) || os(visionOS) || os(tvOS) || os(watchOS)
  let sys_nsig = NSIG
  #endif

  var signames : [String] = []
  required init() {
    signames = swiftify_signames()
  }
  
  static func main() {
    let z = Self().main()
    exit(z)
  }
  
  func main() -> Int32 {
    var args = ArraySlice(CommandLine.arguments).dropFirst()
    guard args.count >= 1 else {
      usage()
      return 1
    }
    
    var numsig = SIGTERM
    
    if args.first == "-l" {
      args.removeFirst()
      guard args.count < 2 else {
        usage()
        return 1
      }
      
      if args.count == 1 {
        if let x = Int32(args[0]) {
          numsig = x
        } else {
          errx(2, "illegal signal number: \(args[0])")
        }
        
        if numsig >= 128 {
          numsig -= 128
        }
        if (numsig <= 0 || numsig >= sys_nsig) {
          nosig(args[0])
        }
        print_signum(numsig)
        return 0
      }
      printsignals(FileHandle.standardOutput)
      return 0
    }
    
    if args[0] == "-s" {
      args.removeFirst()
      guard args.isEmpty else {
        warnx("option requires an argument -- s")
        usage()
        return 2
      }
      if args[0] != "0" {
        numsig = signame_to_signum(args[0])
        if numsig < 0 {
          nosig(args[0])
        }
      } else {
        numsig = 0
      }
      args.removeFirst()
    } else if args[0].hasPrefix("-") && !args[0].dropFirst().hasPrefix("-") {
      let jj = String(args[0].dropFirst())
      let k = jj.first
      if let k, k.isLetter {
        numsig = signame_to_signum(jj)
        if numsig < 0 {
          nosig(jj)
        }
      } else if let k, k.isNumber {
        if let x = Int32(jj) {
          numsig = x
        } else {
          errx(2, "illegal signal number: \(jj)")
          return 2
        }
        if numsig < 0 {
          nosig(jj)
          return 2
        }
      } else {
        nosig(jj)
        return 2
      }
    }
    
    if args.first == "--" {
      args.removeFirst()
    }
    
    if args.count == 0 {
      usage()
      return 2
    }
    
    var errors : Int32 = 0
    var ret : Int32 = 0
    
    for arg in args {
      #if SHELL
      if arg == "%" {
        ret = killjob(arg, numsig)
      } else {
        if let pidl = pid_t(arg) {
          ret = kill(pidl, numsig)
        } else {
          errx(2, "illegal process id: \(arg)")
        }
      }
      #else
      if let pidl = pid_t(arg) {
        ret = kill(pidl, numsig)
      } else {
        errx(2, "illegal process id: \(arg)")
      }
#endif

      if ret == -1 {
        warn(arg)
        errors = 1
      }
    }
    
    return errors
  }
    
  func swiftify_signames() -> [String] {
    return withUnsafePointer(to: sys_signame) { p in
      let j = MemoryLayout.size(ofValue: sys_signame)
      let k = j / MemoryLayout<UnsafePointer<CChar>>.size
      let ss = p.withMemoryRebound(to: UnsafePointer<CChar>.self, capacity: k) { pp in
        var kk = [String]()
        for i in 0..<k {
          kk.append(String(cString: pp[i]))
        }
        return kk
      }
      return ss
    }
  }
  
  func print_signum(_ numsig: Int32) {
    
    var signame = signames[Int(numsig)]
    signame = signame.uppercased()
    print("\(signame)")
  }
  
  
  func signame_to_signum(_ s : String) -> Int32 {
    var sig = Substring(s)
    if s.uppercased().hasPrefix("SIG") { sig = s.dropFirst(3) }
    let k = 1 + (signames.dropFirst().firstIndex(of: String(sig) ) ?? -2)
    return Int32(k)
  }
  
  func nosig(_ s : String) {
    warnx("unknown signal \(s); valid signals:")
    printsignals(FileHandle.standardError)
  }
  
  func printsignals(_ fpx : FileHandle) {
    var fp = fpx
    print(signames.dropFirst().joined(separator: " ").uppercased(), to: &fp)
  }
  
  func usage() {
    print("""
    usage: kill [-s signal_name] pid ...
           kill -l [exit_status]
           kill -signal_name pid ...
           kill -signal_number pid ...
    """)
    #if SHELL
    error(NULL)
    #else
    exit(2)
    #endif
  }
}
