
// Generated by Robert M. Lefkowitz <r0ml@liberally.net> in 2024 using ChatGPT
// from a file containing the following notice:

/*
 * SPDX-License-Identifier: BSD-2-Clause-FreeBSD
 *
 * Copyright (c) 2000 Peter Wemm <peter@FreeBSD.org>
 * Copyright (c) 2000 Paul Saab <ps@FreeBSD.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

import CMigration

@main final class killall : ShellCommand {
  
  var signames : [String] = []
  let OPTIONS = "c:dej:Ilmqst:u:vz"

//  var procs: [kinfo_proc]
  var sb = stat()
  var pw: UnsafeMutablePointer<passwd>?
  var rgx = regex_t()
  var pmatch = regmatch_t()
  var buf : String = ""
//  var first: CChar
  
  struct CommandOptions {
    var user: String?
    var tty: String?
    var cmd: String?
    var qflag = 0
    var vflag = 0
    var sflag = 0
    var dflag = 0
    var eflag = 0
    var jflag = 0
    var Iflag = 0
    var mflag = 0
    var zflag = 0
    var uid: uid_t = 0
    var tdev: dev_t = 0
    //  var mypid: pid_t
    var thiscmd: String?

    var args = [String]()
  }
  
//  var thispid: pid_t
//  var thistdev: dev_t
  var sig = SIGTERM
  var errors = 0
  var jid: Int = 0
  var mib = [Int32](repeating: 0, count: 4)
//  var miblen: u_int
//  var size: size_t
//  var matched: Int
  var killed = 0
  
  var justPrint = false
  

  required init() {
    signames = swiftify_signames()
  }
  
  // copied from kill
  func swiftify_signames() -> [String] {
    return withUnsafePointer(to: sys_signame) { p in
      let j = MemoryLayout.size(ofValue: sys_signame)
      let k = j / MemoryLayout<UnsafePointer<CChar>>.size
      let ss = p.withMemoryRebound(to: UnsafePointer<CChar>.self, capacity: k) { pp in
        var kk = [String]()
        for i in 0..<k {
          kk.append(String(cString: pp[i]))
        }
        return kk
      }
      return ss
    }
  }
  
  var usage : String { get {
#if os(macOS) || os(iOS) || os(tvOS) || os(watchOS) || os(visionOS)
    let a = "usage: killall [-delmsqvz] [-help] [-I]"
#else
    let a = "usage: killall [-delmsqvz] [-help] [-I] [-j jail]"
#endif
    return a + """

               [-u user] [-t tty] [-c cmd] [-SIGNAL] [cmd]...
At least one option or argument to specify processes must be given."
"""
  } }
  
  func printsig(_ fpx: FileDescriptor) {
    var output = ""
    var fp = fpx
    
    var ind = 0
    for p in signames.dropFirst() {
      output += p
      ind += p.count
      if ind > 75 {
        output += "\n"
        ind = 0
      } else {
        output += " "
        ind += 1
      }
    }
    print(output, to: &fp)
  }
  
  func nosig(_ name: String) {
    warnx("unknown signal \(name); valid signals:")
    printsig(FileDescriptor.standardError)
    Darwin.exit(1)
  }
  
  func kludge_signal_arg(_ argr : String) throws(CmdErr) -> Int32? {
    var sig: Int = -1
    var arg = Substring(argr)
    
    guard let ch = arg.first else { return nil }
    if ch.isLetter {
      if arg == "help" {
        throw CmdErr(1)
      }
      if arg.uppercased().hasPrefix("SIG") {
        arg  = arg.dropFirst(3)
      }
      let sig = signames.dropFirst().firstIndex(of: argr)
      if sig == nil {
        nosig(argr)
      }
    } else if ch.isNumber {
      if let x = Int(arg) {
        sig = x
      } else {
        errx(1, "illegal signal number: \(argr)")
      }
      if sig < 0 || sig >= NSIG {
        nosig(String(argr) )
      }
    } else {
      nosig(String(argr) )
    }
    
    // FIXME: the original implementation finds the last
    // argument with a signal instead of the first
    return Int32(sig)
  }
  

    
  
  func parseOptions() throws(CmdErr) -> CommandOptions {
    var opts = CommandOptions()
      setlocale(LC_ALL, "")
      
      if CommandLine.arguments.count < 2 {
        throw CmdErr(1)
      }
      let go = BSDGetopt(OPTIONS)
      while let (ch, optarg) = try go.getopt() {
        switch ch {
        case "c":
            opts.cmd = optarg
        case "d":
            opts.dflag += 1
        case "e":
            opts.eflag += 1
        case "I":
            opts.Iflag += 1
#if !os(macOS)
        case "j":
            opts.jflag += 1
          if let x = Int(String(cString: optarg)) {
            opts.jid = x
          } else {
            errx(1, "illegal jid: \(String(cString: optarg))")
          }
          if jail_attach(jid) == -1 {
            err(1, "jail_attach(\(jid)")
          }
#endif
        case "l":
          printsig(FileDescriptor.standardOutput)
          justPrint = true
          return opts
        case "m":
            opts.mflag += 1
        case "q":
            opts.qflag += 1
        case "s":
            opts.sflag += 1
        case "t":
            opts.tty = optarg
        case "u":
            opts.user = optarg
        case "v":
            opts.vflag += 1
        case "z":
            opts.zflag += 1
        default:
          if let s = try kludge_signal_arg(optarg) {
            sig = s
          } else {
            throw CmdErr(1)
          }
        }
      }
      
    opts.args = go.remaining
      
#if os(macOS)
    if opts.user == nil && opts.tty == nil && opts.cmd == nil && CommandLine.arguments.count == 0 {
        throw CmdErr(1)
      }
#else
      if user == nil && tty == nil && cmd == nil && !jflag && CommandLine.arguments.count == 0 {
        throw CmdErr(1)
      }
#endif
    return opts
    }
    
    
  func runCommand(_ optsx : CommandOptions) throws(CmdErr) {
    var opts = optsx
      if justPrint { return }
      
      if let tty = opts.tty {
        if tty.hasPrefix("/dev/") {
          buf = tty
        } else if strncmp(tty, "tty", 3) == 0 {
          buf = "/dev/\(tty)"
        } else {
          buf = "/dev/tty\(tty)"
        }
        if stat(buf, &sb) < 0 {
          err(1, "stat(\(buf)")
        }
        if !S_ISCHR(sb.st_mode) {
          errx(1, "\(buf): not a character device")
        }
        opts.tdev = sb.st_rdev
        if opts.dflag != 0 {
          print("ttydev:0x\(cFormat("%x", opts.tdev))")
        }
      }
    if let user = opts.user {
      if let x = uid_t(user) {
        opts.uid = x
        } else {
          pw = getpwnam(user)
          if pw == nil {
            errx(1, "user \(user) does not exist")
          }
          opts.uid = pw!.pointee.pw_uid
          if opts.dflag != 0 {
            print("uid:\(opts.uid)")
          }
        }
      } else {
        opts.uid = getuid()
        if opts.uid != 0 {
          pw = getpwuid(opts.uid)
          if let pw = pw {
            opts.user = String(cString: pw.pointee.pw_name)
          }
          if opts.dflag != 0 {
            print("uid:\(opts.uid)", opts.uid)
          }
        }
      }
      var size : size_t = 0

      mib[0] = CTL_KERN
      mib[1] = KERN_PROC
      
      var miblen : UInt32
      
    if opts.user != nil {
      mib[2] = opts.eflag != 0 ? KERN_PROC_UID : KERN_PROC_RUID
      mib[3] = Int32(opts.uid)
        miblen = 4
    } else if opts.tty != nil {
        mib[2] = KERN_PROC_TTY
      mib[3] = opts.tdev
        miblen = 4
      } else {
#if os(macOS)
        mib[2] = KERN_PROC_ALL
#else
        mib[2] = KERN_PROC_PROC
#endif
        mib[3] = 0
        miblen = 3
      }
      
      var st : Int32 = -1
      
      var procs: [kinfo_proc]
      
      repeat {
        st = sysctl(&mib, miblen, nil, &size, nil, 0)
        if st == -1 {
          err(1, "could not sysctl(KERN_PROC)")
        }
        if size == 0 {
          errx(1, "could not get size from sysctl(KERN_PROC)")
        }
        size += size / 10
        //      newprocs = realloc(procs, size)
        //      if newprocs == nil {
        //        free(procs)
        //        err(1, "could not reallocate memory")
        //      }
        procs = withUnsafeTemporaryAllocation(byteCount: size, alignment: 16) { p in
          st = sysctl(&mib, miblen, p.baseAddress!, &size, nil, 0)
          var procs = Array(repeating: kinfo_proc(), count: size / MemoryLayout<kinfo_proc>.stride)
          for i in 0..<procs.count {
            procs[i]=p.bindMemory(to: kinfo_proc.self)[i]
          }
          return procs
        }
      } while st == -1 && errno == ENOMEM
      if st == -1 {
        err(1, "could not sysctl(KERN_PROC)")
      }
      if size % MemoryLayout<kinfo_proc>.size != 0 {
        var f = FileDescriptor.standardError
        print("proc size mismatch (\(size) total, \(MemoryLayout<kinfo_proc>.size) chunks)", to: &f)
        print("userland out of sync with kernel", to: &f)
        exit(1)
      }
      let nprocs = size / MemoryLayout<kinfo_proc>.size
    if opts.dflag != 0 {
        print("nprocs \(nprocs)")
      }
      let mypid = getpid()
      
      for i in 0..<nprocs {
#if os(macOS)
        if procs[i].kp_proc.p_stat == SZOMB && opts.zflag == 0 {
          continue
        }
        let thispid = procs[i].kp_proc.p_pid
        
        var mib = [Int32](repeating: 0, count: 3)
        var argmax: UInt = 0
        var syssize: size_t
        
        mib[0] = CTL_KERN
        mib[1] = KERN_ARGMAX
        
        syssize = MemoryLayout<Int>.size
        if sysctl(&mib, 2, &argmax, &syssize, nil, 0) == -1 {
          continue
        }
        
        // argmax += MemoryLayout<Int>.size
        
        //      procargs = malloc(argmax)
        //      if procargs == nil {
        //          continue
        //      }
        
        mib[0] = CTL_KERN
        mib[1] = KERN_PROCARGS2
        mib[2] = thispid
        
        syssize = size_t(argmax)
        opts.thiscmd = withUnsafeTemporaryAllocation(byteCount: syssize, alignment: 16) {p in
          if sysctl(&mib, 3, p.baseAddress!, &syssize, nil, 0) != -1 {
            let procargs = Data(bytes: p.baseAddress!.advanced(by: 4), count: syssize-4)
            
            let fi = procargs.firstIndex(where: {$0==0}) ?? procargs.count
            let pa = procargs[0..<fi]
            
            var thiscmd = String(data: pa, encoding: .ascii)!
            if let j = thiscmd.lastIndex(where: { $0 == "/" }) {
              thiscmd = String(thiscmd[j...].dropFirst())
            }
            return thiscmd
            
          }
          return nil
        }
         let thistdev = procs[i].kp_eproc.e_tdev
#else
        if procs![i].ki_stat == SZOMB && zflag == 0 {
          continue
        }
        thispid = procs![i].ki_pid
        thiscmd = strdup(procs![i].ki_comm)
        let thistdev = procs![i].ki_tdev
#endif
        if thispid == mypid {
          continue
        }
        
        var matched = true
        if let tty = opts.tty {
          if thistdev != opts.tdev {
            matched = false
          }
        }
        if let cmd = opts.cmd {
          if opts.mflag != 0 {
            if regcomp(&rgx, cmd, REG_EXTENDED|REG_NOSUB) != 0 {
              opts.mflag = 0
              warnx("\(cmd): illegal regexp")
            }
          }
          if opts.mflag != 0 {
            pmatch.rm_so = 0
            pmatch.rm_eo = regoff_t(opts.thiscmd!.count)
            if regexec(&rgx, opts.thiscmd, 0, &pmatch, REG_STARTEND) != 0 {
              matched = false
            }
            regfree(&rgx)
          } else {
            // FIXME: what is this?
            if strncmp(opts.thiscmd, cmd, Int(MAXCOMLEN)) != 0 {
              matched = false
            }
          }
        }
        if matched == false {
          continue
        }
        if CommandLine.arguments.count > 0 {
          matched = false
        }
        for j in CommandLine.arguments {
          if opts.mflag != 0 {
            if regcomp(&rgx, j, REG_EXTENDED|REG_NOSUB) != 0 {
              opts.mflag = 0
              warnx("\(j): illegal regexp")
            }
          }
          if opts.mflag != 0 {
            pmatch.rm_so = 0
            pmatch.rm_eo = regoff_t(opts.thiscmd!.count)
            if regexec(&rgx, opts.thiscmd, 0, &pmatch, REG_STARTEND) == 0 {
              matched = true
            }
            regfree(&rgx)
          } else {
            if opts.thiscmd == j {
              matched = true
            }
          }
          if matched {
            break
          }
        }
        if matched && opts.Iflag != 0 {
#if os(macOS)
          print("Send signal \(sig) to \(opts.thiscmd!) (pid \(thispid))? ", terminator: "")
#else
          printf("Send signal %d to %s (pid %d uid %d)? ", sig, thiscmd, thispid, thisuid)
#endif
          fflush(stdout)
          var ch = getchar()
          let first = CChar(ch)
          while ch != 10 && ch != EOF {
            ch = getchar()
          }
          if first != Character("y").asciiValue! && first != Character("Y").asciiValue! {
            matched = false
          }
        }
        if matched == false {
          continue
        }
        if opts.dflag != 0 {
#if os(macOS)
          print("sig:\(sig), cmd:\(opts.thiscmd!), pid:\(thispid), dev:0x\(cFormat("%0x",thistdev))")
#else
          printf("sig:%d, cmd:%s, pid:%d, dev:0x%jx uid:%d\n", sig, thiscmd, thispid, thistdev, thisuid)
#endif
        }
        
        if opts.vflag != 0 || opts.sflag != 0 {
          print("kill -\(signames[Int(sig)]) \(thispid)")
        }
        
        killed += 1
        if opts.dflag == 0 && opts.sflag == 0 {
          if kill(thispid, sig) < 0 {
            warn("warning: kill -\(signames[Int(sig)]) \(thispid)")
            errors = 1
          }
        }
      }
      if killed == 0 {
        if opts.qflag == 0 {
          var se = FileDescriptor.standardError
          let j = getuid() != 0 ? "belonging to you " : ""
          print("No matching processes \(j)were found", to: &se )
        }
        errors = 1
      }
      if errors != 0 { throw CmdErr(errors) }
    }
  }
