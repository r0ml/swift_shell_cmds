
// Generated by Robert M. Lefkowitz <r0ml@liberally.net> in 2024 using ChatGPT
// from a file containing the following notice:

/*
 * SPDX-License-Identifier: BSD-2-Clause
 *
 * Copyright (C) 1997 John D. Polstra.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY JOHN D. POLSTRA AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL JOHN D. POLSTRA OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

// FIXME: apparently does not get built for APPLE platforms
import Foundation
import shared

nonisolated(unsafe) var keep = false
nonisolated(unsafe) var lockfd : Int32 = -1
nonisolated(unsafe) var lockname : String!

func killed(_ sig: Int32) {
  cleanup()
  signal(sig, SIG_DFL)
  if kill(getpid(), sig) == -1 {
    err(Int(EX_OSERR), "kill failed")
  }
}

func cleanup() {
  if keep {
    flock(lockfd, LOCK_UN)
  } else {
    unlink(lockname)
  }
}

@main final class lockf : ShellCommand {
  var flags: Int32
  var waitsec: Int
  var silent = false
//  var lockname : String!
//  var lockfd : Int32 = -1
  var timed_out = false
 
  var args : [String] = []
  
  required init() {
    flags = O_CREAT | O_RDONLY
    waitsec = -1
  }
  
  func parseOptions() throws(CmdErr) {
    
    let go = BSDGetopt("sknt:w")
    while let (ch, optarg) = try go.getopt() {
      switch ch {
      case "k":
        keep = true
      case "n":
        flags &= ~O_CREAT
      case "s":
        silent = true
      case "t":
        var endptr: UnsafeMutablePointer<Int8>?
        let oa = optarg
        waitsec = strtol(oa, &endptr, 0)
        if oa.isEmpty || endptr?.pointee != 0 || waitsec < 0 {
          errx(Int(EX_USAGE), "invalid timeout \"\(oa)\"")
        }
      case "w":
        flags = (flags & ~O_RDONLY) | O_WRONLY
      default:
        throw CmdErr(1)
      }
    }
    
    args = go.remaining
    
    if args.count < 2 {
      throw CmdErr(1)
    }
    
  }
  
  
  func runCommand() throws(CmdErr) {
    lockname = args.removeFirst()
    
    if waitsec > 0 {
      var act = sigaction()
      act.__sigaction_u = unsafeBitCast(timeout, to: __sigaction_u.self)
      sigemptyset(&act.sa_mask)
      act.sa_flags = 0
      sigaction(SIGALRM, &act, nil)
      alarm(UInt32(waitsec))
    }
    
    lockfd = acquire_lock(lockname, flags | O_NONBLOCK)
    while lockfd == -1 && !timed_out && waitsec != 0 {
      if keep {
        lockfd = acquire_lock(lockname, flags)
      } else {
        wait_for_lock(lockname)
        lockfd = acquire_lock(lockname, flags | O_NONBLOCK)
      }
    }
    
    if waitsec > 0 {
      alarm(0)
    }
    
    if lockfd == -1 {
      if silent {
        exit(EX_TEMPFAIL)
      }
      errx(Int(EX_TEMPFAIL), "\(String(describing: lockname)): already locked")
    }
    
    if atexit( { cleanup() } ) == -1 {
      err(Int(EX_OSERR), "atexit failed")
    }
    
    let status = insteadOfFork(args[0], args)
    
    let r = WIFEXITED(status) ? WEXITSTATUS(status) : EX_SOFTWARE
    if r != 0 { throw CmdErr(Int(r) ) }
  }
  
  func acquire_lock(_ name: String, _ flags: Int32) -> Int32 {
    let fd = open(name, O_EXLOCK|flags, 0666)
    if fd == -1 {
      if errno == EAGAIN || errno == EINTR {
        return -1
      } else if errno == ENOENT && (flags & O_CREAT) == 0 {
        err(Int(EX_UNAVAILABLE), name)
      }
      err(Int(EX_CANTCREAT), "cannot open \(name)")
    }
    return fd
  }
  
  
  func timeout(_ sig: Int32) {
    timed_out = true
  }
  
  var usage = "usage: lockf [-kns] [-t seconds] file command [arguments]"
  
  func wait_for_lock(_ name: String) {
    var fd: Int32
    fd = open(name, O_RDONLY|O_EXLOCK, 0666)
    if fd == -1 {
      if errno == ENOENT || errno == EINTR {
        return
      }
      err(Int(EX_CANTCREAT), "cannot open \(name)")
    }
    close(fd)
  }
  

  func insteadOfFork(_ cmd : String, _ args : [String]) -> Int32 {
    let process = Process()

    guard let execu = searchPath(for: cmd) else { print("command not found"); return -1 } // d.appending(component: "..").appending(component: executable).path(percentEncoded:false)
    
    
    
    process.launchPath = execu
    process.arguments = args
    process.launch()
    
    signal(SIGINT, SIG_IGN)
    signal(SIGQUIT, SIG_IGN)
    signal(SIGTERM, { y in killed(y) } )

    
    process.waitUntilExit()

    return process.terminationStatus


  }
}
