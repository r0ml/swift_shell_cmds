
// Generated by Robert M. Lefkowitz <r0ml@liberally.net> in 2024 using ChatGPT
// from a file containing the following notice:

/*
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 1989, 1993, 1994
 *  The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

import Foundation
import CMigration

@main final class Nice : ShellCommand {
  let DEFNICE : Int32 = 10
  var niceness: Int32 = 10
  
  struct CommandOptions {
    var args = [String]()
  }
  
  func parseOptions() throws(CmdErr) -> CommandOptions {
    
    var opts = CommandOptions()
    var ep: UnsafeMutablePointer<CChar>?
    
    
    var aa = CommandLine.arguments
    // FIXME: this is broken
    /* Obsolescent syntax: -number, --number */
    if aa.count >= 2 {
       let argx = aa[1]
       if argx.first == "-",
       let argy = argx.dropFirst().first,
       argy == "-" || Int(String(argy)) != nil,
      argx != "--" {
        aa[1] = "-n\(String(argx.dropFirst()))"
      }
    }
    
    let go = BSDGetopt("n:", args: ArraySlice(aa))
    while let (ch, optarg) = try go.getopt() {
      switch ch {
      case "n":
        errno = 0
        let opta = optarg
        
        niceness = Int32(strtol(opta, &ep, 10))
        let epx = if let ep { String(cString: ep) } else { "" }
        if epx == opta || epx != "" || errno != 0 ||
            niceness < Int32.min || niceness > Int32.max {
          throw CmdErr(1, "\(opta): invalid nice value")
        }
      default:
        throw CmdErr(1)
      }
    }
    
    opts.args = go.remaining
    
    if opts.args.count == 0 {
      throw CmdErr(1)
    }
    return opts
  }
  
  func runCommand(_ opts : CommandOptions) throws(CmdErr) {
    
    errno = 0
    niceness += getpriority(PRIO_PROCESS, 0)
    if errno != 0 {
      print("getpriority warning")
    } else if setpriority(PRIO_PROCESS, 0, niceness) != 0 {
      print("setpriority warning")
    }
      
    let evpa = opts.args.dropFirst().map { strdup($0) }
    execvp(opts.args[0], evpa)
    
    let nn = String(cString: getprogname())
    
//     let nn = String(cString: basename(argv[0]))
    let n = "\(opts.args[0])"
    let e = String(cString: strerror( errno ))
    fputs("\(nn): \(n): \(e)\n", stderr)
    exit(errno == ENOENT ? 127 : 126)
  }
  
  var usage = "usage: nice [-n increment] utility [argument ...]"
}
