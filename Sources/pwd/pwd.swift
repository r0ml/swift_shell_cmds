
// Generated by Robert M. Lefkowitz <r0ml@liberally.net> in 2024 using ChatGPT
// from a file containing the following notice:

/*
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 1991, 1993, 1994
 *  The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

import CMigration 

import Darwin


@main final class pwd : ShellCommand {
  
  var usage = "usage: pwd [-L | -P]"
  
  func getcwd_logical() -> String? {
    var lg = stat(), phy = stat()
    let pwdStr = Environment["PWD"]
    
    if let pwdStr, pwdStr.first == "/" {
      if stat(pwdStr, &lg) == -1 || stat(".", &phy) == -1 {
        return nil
      }
      if lg.st_dev == phy.st_dev && lg.st_ino == phy.st_ino {
        return pwdStr
      }
    }
    
    errno = ENOENT
    return nil
  }
  
  
  struct CommandOptions {
    var physical = false
  }

  func parseOptions() throws(CmdErr) -> CommandOptions {
    var opts = CommandOptions()
    let go = BSDGetopt("LP")
    while let (ch, _) = try go.getopt() {
      
      switch ch {
      case "L":
          opts.physical = false
      case "P":
          opts.physical = true
      case "?":
        fallthrough
      default:
        throw CmdErr(1)
      }
    }
    
    if go.remaining.count > 0 {
      throw CmdErr(1)
    }
    return opts
  }
  
  func runCommand(_ opts : CommandOptions) throws(CmdErr) {
    var p : String?
    if (!opts.physical) {
      p = getcwd_logical()
    }
    
    if p == nil || (opts.physical || errno == ENOENT ) {
      p = String(cString: getcwd(nil, 0))
    }
    
//    if (!physical && (p = getcwd_logical()) != nil) ||
//        ((physical || errno == ENOENT) && (p = String(cString: getcwd(nil, 0))) != nil) {
    if let p {
      print(p)
    } else {
      throw CmdErr(1, ".")
    }

  }
}
