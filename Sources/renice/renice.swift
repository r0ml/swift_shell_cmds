
// Generated by Robert M. Lefkowitz <r0ml@liberally.net> in 2024 using ChatGPT
// from a file containing the following notice:

/*
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 1983, 1989, 1993
 *  The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

import Foundation
import CMigration

@main class renice {
  enum PriorityType: Int32 {
    case process = 0
    case pgrp
    case user
  }
  
  required init() {}
  
  static func main() {
    let z = Self().main()
    exit(z)
  }
  
  func main() -> Int32 {
//    let argc = CommandLine.argc
//    let argv = CommandLine.unsafeArgv
    
    var havedelim = false, haveprio = false, incr = false
    var errs = 0
    var prio : Int32 = 0
    var who : id_t = 0
    var which = PriorityType.process
    
    let pgrp = UInt32(getpgrp())
    let priox = Int(getpriority(PRIO_PGRP, pgrp))
    
    for arg in CommandLine.arguments.dropFirst() {
      if !havedelim {
        if arg == "-g" {
          which = .pgrp
          continue
        }
        if arg == "-u" {
          which = .user
          continue
        }
        if arg == "-p" {
          which = .process
          continue
        }
        if arg == "--" {
          havedelim = true
          continue
        }
        if arg == "-n" {
          // FIXME: I dont decrement argc -- so this needs another approach
          if haveprio || incr || CommandLine.arguments.count < 2 {
            usage()
          }
          incr = true
          continue
        }
      }
      if !haveprio {
        if let num = Int32(arg) {
          prio = num
          haveprio = true
          continue
        } else {
          return 1
        }
      }
      if which == .user {
        if let pwd = getpwnam(arg) {
          who = pwd.pointee.pw_uid
        } else if let num = id_t(arg) {
          who = num
        } else {
          errs += 1
          continue
        }
      } else {
        if let num = id_t(arg) {
          who = num
        } else {
          errs += 1
          continue
        }
      }
      errs += donice(which: which, who: who, priox: prio, incr: incr)
    }
    if !haveprio {
      usage()
    }
    return errs != 0 ? 1 : 0
  }
  
  func donice(which: PriorityType, who: id_t, priox: Int32, incr: Bool) -> Int {
    let oldprio = getpriority(which.rawValue, who)
    var prio = priox
    
    if oldprio == -1 && errno != 0 {
      return 1
    }
    if incr {
      prio = oldprio + prio
    }
    if prio > PRIO_MAX {
      prio = PRIO_MAX
    }
    if prio < PRIO_MIN {
      prio = PRIO_MIN
    }
    if setpriority(which.rawValue, who, prio) < 0 {
      return 1
    }
    return 0
  }
  
  func usage() {
    var fh = FileHandle.standardError
    print("usage: renice priority [[-p] pid ...] [[-g] pgrp ...] [[-u] user ...]", to: &fh)
    print("       renice -n increment [[-p] pid ...] [[-g] pgrp ...] [[-u] user ...]", to: &fh)
    exit(1)
  }
}
