
// Generated by Robert M. Lefkowitz <r0ml@liberally.net> in 2024 using ChatGPT
// from a file containing the following notice:

/*
 * Copyright (c) 1988, 1993, 1994
 *  The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

import Foundation
import CMigration

nonisolated(unsafe) var reportRequested = false

func reportRequest(_ signo: Int32) {
  reportRequested = true
}

@main class sleep {


  required init() {}
  
  static func main() {
    let z = Self().main()
    exit(z)
  }
  
  func main() -> Int32 {
    let argc = CommandLine.argc
    let argv = CommandLine.arguments
    
    var timeToSleep = timespec()
    var timeSlept = timespec()
    var d: Double = 0.0
    var original: time_t = 0
    var buf = [Character](repeating: " ", count: 2)
    
    if argc == 2 || (argc == 3 && argv.first == "--") {
      // POSIX issue:   "sleep -- 3" should be the same as "sleep 3",
      // normally getopt makes this kind of thing work, but sleep has
      // no options, so we do it "the easy way"
    } else {
      usage()
    }
    
    
    withUnsafeMutablePointer(to: &d) { dp in
      withUnsafeMutablePointer(to: &buf) { bufp in
        withVaList([dp, bufp]) { va in
          if vsscanf(argv.last!, "%lf%1s", va) != 1 {
            usage()
          }
        }
      }
    }
    
    if d > Double(INT_MAX) {
      usage()
    }
    if d <= 0 {
      return 0
    }
    
    timeToSleep.tv_sec = time_t(d)
    original = timeToSleep.tv_sec
    timeToSleep.tv_nsec = Int(1e9 * (d - Double(timeToSleep.tv_sec)))
    
      signal(SIGINFO, { reportRequest($0) } )
    
    while nanosleep(&timeToSleep, &timeSlept) != 0 {
      if reportRequested {
        print("about \(timeSlept.tv_sec) second(s) left out of the original \(original)")
        reportRequested = false
      } else if errno != EINTR {
        print("nanosleep error")
      }
    }
    return 0
  }
  
  func usage() {
    var fh = FileHandle.standardError
    print("usage: sleep seconds", to: &fh )
    exit(1)
  }
}
