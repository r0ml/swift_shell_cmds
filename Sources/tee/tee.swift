
// Generated by Robert M. Lefkowitz <r0ml@liberally.net> in 2024 using ChatGPT
// from a file containing the following notice:

/*
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 1988, 1993
 *  The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

import Foundation
import CMigration

let DEFFILEMODE = Darwin.S_IRUSR|Darwin.S_IWUSR|Darwin.S_IRGRP|Darwin.S_IWGRP|Darwin.S_IROTH|Darwin.S_IWOTH


@main final class tee : ShellCommand {
  struct FDs {
    var fd: Int32
    var name: String
  }
  var head: [FDs] = []
  
  func add(_ fd: Int32, _ name: String) {
    head.append(FDs(fd: fd, name: name))
  }
  
  var usage = "usage: tee [-ai] [file ...]"

  let BSIZE = 8 * 1024

  struct CommandOptions {
    var args : [String] = []
    //  var exitval: Int = 0
    var append = false
  }
  
  func parseOptions() throws(CmdErr) -> CommandOptions {
    var opts = CommandOptions()
    
    let go = BSDGetopt("ai")
    while let (ch, _) = try go.getopt() {
      switch(ch) {
      case "a":
          opts.append = true
        break
      case "i":
          Darwin.signal(Darwin.SIGINT, Darwin.SIG_IGN)
        break
      case "?":
        fallthrough
      default:
        throw CmdErr(1)
      }
    }
    
    opts.args = go.remaining
    return opts
  }
  
  func runCommand(_ opts : CommandOptions) throws(CmdErr) {
    var buf = [Int8](repeating: 0, count: BSIZE)
    
    add(STDOUT_FILENO, "stdout")
    
    for arg in opts.args {
      let fd = Darwin.open(arg, opts.append ?
                           Darwin.O_WRONLY|Darwin.O_CREAT|Darwin.O_APPEND :
                            Darwin.O_WRONLY|Darwin.O_CREAT|Darwin.O_TRUNC, DEFFILEMODE)
      if fd < 0 {
        // warn(arg)
        throw CmdErr(1, arg)
//        exitval = 1
      } else {
        add(fd, arg)
      }
    }
    
   try withUnsafeMutablePointer(to: &buf) { (bufp) throws(CmdErr) in
      while true {
        let rval = Darwin.read(Darwin.STDIN_FILENO, bufp, BSIZE)
        if rval == 0 { break }
        if rval < 0 {
          err(1, "read")
        }
        for p in head {
          var n = rval
          
          var bp = bufp
          repeat {
            let wval = Darwin.write(p.fd, bp, n)
            if wval == -1 {
              throw CmdErr(1, p.name)
//              warn( p.name)
            }
            bp += wval
            n -= wval
          } while (n != 0)
        }
      }
    }
  }
}
