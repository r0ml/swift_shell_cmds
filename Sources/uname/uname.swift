
// Generated by Robert M. Lefkowitz <r0ml@liberally.net> in 2024 using ChatGPT
// from a file containing the following notice:

/*
 * SPDX-License-Identifier: BSD-4-Clause
 *
 * Copyright (c) 2002 Juli Mallett.
 * Copyright (c) 1993
 *  The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *  This product includes software developed by the University of
 *  California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

import Foundation
import shared

struct Flags : OptionSet {

  init(rawValue: UInt16) {
    self.rawValue = rawValue
    char = "?"
  }
  
  init(rawValue: UInt16, char : String) {
    self.char = char
    self.rawValue = rawValue
  }
    
  let rawValue : UInt16
  let char : String
  
  static let MFLAG = Flags(rawValue: 0x01, char: "m")
  static let NFLAG = Flags(rawValue: 0x02, char: "n")
  static let PFLAG = Flags(rawValue: 0x04, char: "p")
  static let RFLAG = Flags(rawValue: 0x08, char: "r")
  static let SFLAG = Flags(rawValue: 0x10, char: "s")
  static let VFLAG = Flags(rawValue: 0x20, char: "v")
  
#if os(Windows) || os(Linux)
  static let IFLAG = Flags(rawValue: 0x40)
  static let UFLAG = Flags(rawValue: 0x80)
  static let KFLAG = Flags(rawValue: 0x100)
  static let BFLAG = Flags(rawValue: 0x200)
  
  static let all : Flags = [.MFLAG, .NFLAG, .PFLAG, .RFLAG, .SFLAG, .VFLAG, .IFLAG, .UFLAG, .KFLAG, .BFLAG]
  #else
  static let all : Flags = [.MFLAG, .NFLAG, .PFLAG, .RFLAG, .SFLAG, .VFLAG]

#endif
  
}


#if os(macOS) || os(iOS) || os(tvOS) || os(watchOS) || os(visionOS)
let opts = "amnoprsv"

let env_opts : [String:String] = [
  "m" :  "UNAME_MACHINE",
  "n" :  "UNAME_NODENAME",
  "r" :  "UNAME_RELEASE",
  "s" :  "UNAME_SYSNAME",
  "v" : "UNAME_VERSION"
  ]

#else
let opts = "abiKmnoprsUv"
#endif

@main final class uname : ShellCommand {
  var flags : Flags = []
  
  func parseOptions() throws(CmdErr) {
    // setup_get()
    
    let go = BSDGetopt(opts)
    while let (ch, _) = try go.getopt() {
      switch ch {
      case "a":
        flags = Flags.all
        
#if os(Windows) || os(Linux)
      case "b":
        flags.formUnion(.BFLAG)
      case "i":
        flags.formUnion(.IFLAG)
      case "K":
        flags.formUnion(.KFLAG)
      case "U":
        flags.formUnion(.UFLAG)
#endif
        
      case "m":
        flags.formUnion(.MFLAG)
      case "n":
        flags.formUnion(.NFLAG)
      case "p":
        flags.formUnion(.PFLAG)
      case "r":
        flags.formUnion(.RFLAG)
      case "s","o":
        flags.formUnion(.SFLAG)
      case "v":
        flags.formUnion(.VFLAG)
      case "?":
        fallthrough
      default:
        throw CmdErr(1)
      }
    }
    
    if go.remaining.count > 0 {
      throw CmdErr(1)
    }
    
    if flags.isEmpty {
      flags.formUnion(.SFLAG)
    }
  }
  
  func runCommand() throws(CmdErr) {
    print_uname(flags)
  }
  
  /*
   func setup_get() {
   CHECK_ENV("s", sysname);
   CHECK_ENV("n", hostname);
   CHECK_ENV("r", release);
   CHECK_ENV("v", version);
   CHECK_ENV("m", platform);
   CHECK_ENV("p", arch);
   #if os(Windows) || OS(Linux)
   CHECK_ENV("i", ident);
   CHECK_ENV("K", kernvers);
   CHECK_ENV("U", uservers);
   CHECK_ENV("b", buildid);
   #endif
   }
   */
  
  func print_uname(_ flags : Flags) {
    PRINT_FLAG(flags, .SFLAG, { self.native_q(CTL_KERN, KERN_OSTYPE) } )
    PRINT_FLAG(flags, .NFLAG, { self.native_q(CTL_KERN, KERN_HOSTNAME) } )
    PRINT_FLAG(flags, .RFLAG, { self.native_q(CTL_KERN, KERN_OSRELEASE) } )
    PRINT_FLAG(flags, .VFLAG, { self.native_q(CTL_KERN, KERN_VERSION).replacing(/\n|\t/, with: " ") } )
    PRINT_FLAG(flags, .MFLAG, { self.native_q(CTL_HW, HW_MACHINE) } )
    PRINT_FLAG(flags, .PFLAG, { self.arch } )
    
#if os(Windows) || os(Linux)
    PRINT_FLAG(flags, .IFLAG, ident);
    PRINT_FLAG(flags, .KFLAG, kernvers);
    PRINT_FLAG(flags, .UFLAG, uservers);
    PRINT_FLAG(flags, .BFLAG, buildid);
#endif
    
    print("");
  }
  
  var arch : String {
#if arch(powerpc) || arch(powerpc64)
    return "powerpc"
#elseif arch(i386) || arch(x86_64)
    return "i386"
#elseif arch(arm) || arch(arm64)
    return "arm"
#else
    return "unknown"
#endif
  }
  
  var space = 0
  func PRINT_FLAG(_ flags : Flags, _ flag : Flags, _ v : @escaping () -> String) {
    if flags.contains(flag) {
      if space != 0 {
        print(" ", terminator: "");
      } else {
        space+=1;
      }
      
      if let z = scan_env(flag.char) {
        print( z, terminator: "");
      } else {
        let z = v()
        print( z, terminator: "");
      }
    }
  }
  
  
  var usage = "usage: uname [-\(opts)]"
  
  func native_q(_ mib0 : Int32, _ mib1 : Int32) -> String {
    var mib : [Int32] = [ mib0, mib1]
    var buf = Array(repeating: Int8(0), count: 1024)
    var len : Int = 1024
    let x = sysctl(&mib, 2, &buf, &len, nil, 0)
    if x == -1 {
      err(1, "sysctl")
    }
    return String(cString: &buf)
  }
  
  /*
   * Scan the environment for an override.  upstream_optalias is the 1:1 name that
   * upstream uses (e.g., -n => UNAME_n); we'll fallback to it if the mapped
   * long option does not exist.  Our aliases take precedence.
   */
  func scan_env(_ opt : String) -> String? {
    let k = ProcessInfo.processInfo.environment
    if let a = env_opts[opt],
       let z = k[a] { return z }
    return k["UNAME_\(opt)"]
  }
  
}
