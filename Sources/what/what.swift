
// Generated by Robert M. Lefkowitz <r0ml@liberally.net> in 2024 using ChatGPT
// from a file containing the following notice:

/*
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 1980, 1988, 1993
 *  The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

import Foundation
import CMigration

@main final class What : ShellCommand {
  struct CommandOptions {
    var qflag = false
    var sflag = false
    //    var inStream: InputStream?
    var args = [String]()
  }
  
  func parseOptions() throws(CmdErr) -> CommandOptions {
    var opts = CommandOptions()
    
    let go = BSDGetopt("qs")
    while let (ch, _) = try go.getopt() {
      switch ch {
      case "q":
          opts.qflag = true
      case "s":
          opts.sflag = true
      default:
        throw CmdErr(1)
      }
    }
    
    opts.args = go.remaining
    return opts
  }
  
  func runCommand(_ opts : CommandOptions) async throws(CmdErr) {
    var file: String?
    var found = false

    do {
      if opts.args.count == 0 {
        if let fh = FileHandle(forReadingAtPath: "/dev/stdin") {
          if try await search(opts.sflag, opts.qflag, fh) {
            found = true
          }
        }
      } else {
        for arg in opts.args {
          file = arg
          
          if let inStream = FileHandle(forReadingAtPath: file!) {
            
            //        inStream = InputStream(fileAtPath: file!)
            if !opts.qflag {
              print("\(file!):")
            }
            if try await search(opts.sflag, opts.qflag, inStream) {
              found = true
            }
            try? inStream.close()
          } else {
            if !opts.qflag {
              print("\(file!)")
            }
            continue
          }
        }
      }
    } catch let e as CmdErr {
      throw e
    } catch {
      let z = error.localizedDescription
      throw CmdErr(2, z)
    }
    exit(found ? 0 : 1)
  }
  
    var usage = "usage: what [-qs] [file ...]"
    
    func search(_ one: Bool, _ quiet: Bool, _ inStream: FileHandle) async throws -> Bool {
      var found = false
//      var c: Int

      var state = 0
      for try await b in inStream.bytes {
        let ch = Character(UnicodeScalar(b))

        switch state {
//      while true {
//        do {
//          if let c = try inStream.read(upToCount: 1) {
//            let ch = String(data: c, encoding: .nonLossyASCII)!
        case 0:
            if ch != "@" {
              state = 0
              continue
            }
          state = 1
        case 1:
            if ch != "(" {
              state = 0
              continue
            }
          state = 2
          
        case 2:
            if ch != "#" {
              state = 0
              continue
            }
          state = 3
        case 3:
            if ch != ")" {
              state = 0
              continue
            }
          state = 4
          
            if !quiet {
              print("\t", terminator: "")
            }
        case 4:
              if (b != 0 && ch != "\"" && ch != ">" && ch != "\\" && ch != "\n") {
                print(ch, terminator: "")
                continue
              }
              print("")
              found = true
              if one {
                break
              } else {
                state = 0
                continue
              }
        default:
        fatalError("not possible")
            }
        }
      return found
    }
  }

