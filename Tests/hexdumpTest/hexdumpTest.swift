
// Generated by Robert M. Lefkowitz <r0ml@liberally.net> in 2024
// from a file containing the following notice:

/*
 SPDX-License-Identifier: BSD-2-Clause-FreeBSD

 Copyright (c) 2017 Kyle Evans <kevans@FreeBSD.org>

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
 notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
 notice, this list of conditions and the following disclaimer in the
 documentation and/or other materials provided with the distribution.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 SUCH DAMAGE.
 */

import Testing
import testSupport


final class hexdumpTest {

  @Test func b_flag() async throws {
    let x1 = getFile("hexdumpTest", "d_hexdump_bflag_a", withExtension: "out")
    let res1 = inFile("hexdumpTest", "d_hexdump_a", withExtension: "in")
    let (_, j1, _) = try captureStdoutLaunch(Self.self, "hexdump", ["-b", res1!] )
    #expect(j1 == x1)

    let x2 = getFile("hexdumpTest", "d_hexdump_bflag_b", withExtension: "out")
    let res2 = inFile("hexdumpTest", "d_hexdump_b", withExtension: "in")
    let (_,j2,_) = try captureStdoutLaunch(Self.self, "hexdump", ["-b", res2!] )
    #expect(j2 == x2)

    let x3 = getFile("hexdumpTest", "d_hexdump_bflag_c", withExtension: "out")
    let res3 = inFile("hexdumpTest", "d_hexdump_c", withExtension: "in")
    let (_, j3, _) = try captureStdoutLaunch(Self.self, "hexdump", ["-b", res3!] )
    #expect(j3 == x3)
  }


  @Test func c_flag() async throws {
    let x1 = getFile("hexdumpTest", "d_hexdump_cflag_a", withExtension: "out")
    let res1 = inFile("hexdumpTest", "d_hexdump_a", withExtension: "in")
    let (_, j1, _) = try captureStdoutLaunch(Self.self, "hexdump", ["-c", res1!] )
    #expect(j1 == x1)

    let x2 = getFile("hexdumpTest", "d_hexdump_cflag_b", withExtension: "out")
    let res2 = inFile("hexdumpTest", "d_hexdump_b", withExtension: "in")
    let (_, j2, _) = try captureStdoutLaunch(Self.self, "hexdump", ["-c", res2!] )
    #expect(j2 == x2)

    let x3 = getFile("hexdumpTest", "d_hexdump_cflag_c", withExtension: "out")
    let res3 = inFile("hexdumpTest", "d_hexdump_c", withExtension: "in")
    let (_, j3, _) = try captureStdoutLaunch(Self.self, "hexdump", ["-c", res3!] )
    #expect(j3 == x3)
  }


  @Test func C_flag() async throws {
    let x1 = getFile("hexdumpTest", "d_hexdump_UCflag_a", withExtension: "out")
    let res1 = inFile("hexdumpTest", "d_hexdump_a", withExtension: "in")!
    let (_, j1, _) = try captureStdoutLaunch(Self.self, "hexdump", ["-C", res1] )
    #expect(j1 == x1)

    let x2 = getFile("hexdumpTest", "d_hexdump_UCflag_b", withExtension: "out")
    let res2 = inFile("hexdumpTest", "d_hexdump_b", withExtension: "in")!
    let (_, j2, _) = try captureStdoutLaunch(Self.self, "hexdump", ["-C", res2] )
    #expect(j2 == x2)

    let x3 = getFile("hexdumpTest", "d_hexdump_UCflag_c", withExtension: "out")
    let res3 = getFile("hexdumpTest", "d_hexdump_c", withExtension: "in")
    let (_, j3, _) = try captureStdoutLaunch(Self.self, "hexdump", ["-C"], res3 )
    #expect(j3 == x3)

  }

  @Test func d_flag() async throws {
    let endian = "el"

    // Write your test here and use APIs like `#expect(...)` to check expected conditions.
    let x1 = getFile("hexdumpTest", "d_hexdump_dflag_a_\(endian)", withExtension: "out")
    let res1 = inFile("hexdumpTest", "d_hexdump_a", withExtension: "in")
    let (_, j1, _) = try captureStdoutLaunch(Self.self, "hexdump", ["-d", res1!] )
    #expect(j1 == x1)

    let x2 = getFile("hexdumpTest", "d_hexdump_dflag_b_\(endian)", withExtension: "out")
    let res2 = inFile("hexdumpTest", "d_hexdump_b", withExtension: "in")
    let (_, j2, _) = try captureStdoutLaunch(Self.self, "hexdump", ["-d", res2!] )
    #expect(j2 == x2)

    let x3 = getFile("hexdumpTest", "d_hexdump_dflag_c_\(endian)", withExtension: "out")
    let res3 = inFile("hexdumpTest", "d_hexdump_c", withExtension: "in")
    let (_, j3, _) = try captureStdoutLaunch(Self.self, "hexdump", ["-d", res3!] )
    #expect(j3 == x3)

  }

  @Test func n_flag() async throws {
    // Write your test here and use APIs like `#expect(...)` to check expected conditions.
    let x1 = getFile("hexdumpTest", "d_hexdump_nflag_a", withExtension: "out")
    let res1 = getFile("hexdumpTest", "d_hexdump_a", withExtension: "in")
    let (_, j1, _) = try captureStdoutLaunch(Self.self, "hexdump", ["-bn", "1"], res1 )
    #expect(j1 == x1)
  }

  @Test func o_flag() async throws {
    let endian = "el"
    let x1 = getFile("hexdumpTest", "d_hexdump_oflag_a_\(endian)", withExtension: "out")
    let res1 = getFile("hexdumpTest", "d_hexdump_a", withExtension: "in")
    let (_, j1, _) = try captureStdoutLaunch(Self.self, "hexdump", ["-o"], res1 )
    #expect(j1 == x1)

    let x2 = getFile("hexdumpTest", "d_hexdump_oflag_b_\(endian)", withExtension: "out")
    let res2 = getFile("hexdumpTest", "d_hexdump_b", withExtension: "in")
    let (_, j2, _) = try captureStdoutLaunch(Self.self, "hexdump", ["-o"], res2 )
    #expect(j2 == x2)

    let x3 = getFile("hexdumpTest", "d_hexdump_oflag_c_\(endian)", withExtension: "out")
    let res3 = getFile("hexdumpTest", "d_hexdump_c", withExtension: "in")
    let (_, j3, _) = try captureStdoutLaunch(Self.self, "hexdump", ["-o"], res3 )
    #expect(j3 == x3)
  }

  @Test func s_flag() async throws {
    let x1 = getFile("hexdumpTest", "d_hexdump_sflag_a", withExtension: "out")
    let res1 = inFile("hexdumpTest", "d_hexdump_a", withExtension: "in")
    let (_, j1, _) = try captureStdoutLaunch(Self.self, "hexdump", ["-bs", "4", res1!] )
    #expect(j1 == x1)

    let (_, j2, _) = try captureStdoutLaunch(Self.self, "hexdump", ["-n", "100", "-s", "1024", "/dev/random"])
    #expect(j2 != nil && !j2!.isEmpty)
  }

  @Test func v_flag() async throws {
    let res1 = inFile("hexdumpTest", "d_hexdump_c", withExtension: "in")
    for i in 0...7 {
      let (_, j1, _) = try captureStdoutLaunch(Self.self, "hexdump", ["-s", "\(i)", res1!])
      let k1 = j1!.components(separatedBy: "\n")
      #expect(k1.contains("*"))

      let (_, j2, _) = try captureStdoutLaunch(Self.self, "hexdump", ["-vs", "\(i)", res1!])
      let k2 = j2!.components(separatedBy: "\n")
      #expect(!k2.contains("*"))
    }

    let (_, j1, _) = try captureStdoutLaunch(Self.self, "hexdump", ["-s", "8", res1!])
    let k1 = j1!.components(separatedBy: "\n")
    #expect(!k1.contains("*"))

    let (_, j2, _) = try captureStdoutLaunch(Self.self, "hexdump", ["-vs", "8", res1!])
    let k2 = j2!.components(separatedBy: "\n")
    #expect(!k2.contains("*"))

  }

  @Test func x_flag() async throws {
    let endian = "el"

    let x1 = getFile("hexdumpTest", "d_hexdump_xflag_a_\(endian)", withExtension: "out")
    let res1 = getFile("hexdumpTest", "d_hexdump_a", withExtension: "in")
    let (_, j1, _) = try captureStdoutLaunch(Self.self, "hexdump", ["-x"], res1 )
    #expect(j1 == x1)

    let x2 = getFile("hexdumpTest", "d_hexdump_xflag_b_\(endian)", withExtension: "out")
    let res2 = getFile("hexdumpTest", "d_hexdump_b", withExtension: "in")
    let (_, j2, _) = try captureStdoutLaunch(Self.self, "hexdump", ["-x"], res2 )
    #expect(j2 == x2)

    let x3 = getFile("hexdumpTest", "d_hexdump_xflag_c_\(endian)", withExtension: "out")
    let res3 = getFile("hexdumpTest", "d_hexdump_c", withExtension: "in")
    let (_, j3, _) = try captureStdoutLaunch(Self.self, "hexdump", ["-x"], res3 )
    #expect(j3 == x3)

  }

  @Test func no_conv_err() async throws {
    let (r1, _, e1) = try captureStdoutLaunch(Self.self, "hexdump", ["-e", "\"%\""])
    #expect( r1 == 1 )
    #expect( e1 == "hexdump: missing conversion character\n")

    let (r2, _, e2) = try captureStdoutLaunch(Self.self, "hexdump", ["-e", "4/2 \"%\""])
    #expect(r2 == 1)
    #expect( e2 == "hexdump: missing conversion character\n")
  }

  // FIXME: need to add the od tests
}
