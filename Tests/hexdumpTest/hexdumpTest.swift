
// Generated by Robert M. Lefkowitz <r0ml@liberally.net> in 2024
// from a file containing the following notice:

/*
 SPDX-License-Identifier: BSD-2-Clause-FreeBSD

 Copyright (c) 2017 Kyle Evans <kevans@FreeBSD.org>

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
 notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
 notice, this list of conditions and the following disclaimer in the
 documentation and/or other materials provided with the distribution.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 SUCH DAMAGE.
 */

import ShellTesting

final class hexdumpTest : ShellTest {
  let cmd = "hexdump"
  let suite = "shell_cmds_hexdumpTest"
  
  @Test(arguments: ["a", "b", "c"]) func b_flag(_ cand : String) async throws {
    let x1 = try fileContents("d_hexdump_bflag_\(cand).out")
    let res1 = try inFile("d_hexdump_\(cand).in")
    try await run(output: x1, args: "-b", res1 )
  }
  
  @Test(arguments: ["a", "b", "c"]) func c_flag(_ cand : String) async throws {
    let x1 = try fileContents("d_hexdump_cflag_\(cand).out")
    let res1 = try inFile("d_hexdump_\(cand).in")
    try await run(output: x1, args: "-c", res1 )
  }
  
  
  @Test(arguments: ["a", "b", "c"]) func C_flag(_ cand : String) async throws {
    let x1 = try fileContents("d_hexdump_UCflag_\(cand).out")
    let res1 = try inFile("d_hexdump_\(cand).in")
    try await run(output: x1, args: "-C", res1 )
  }
  
  @Test(arguments: ["a", "b", "c"]) func d_flag(_ cand : String) async throws {
    let endian = "el"
    
    // Write your test here and use APIs like `#expect(...)` to check expected conditions.
    let x1 = try fileContents("d_hexdump_dflag_\(cand)_\(endian).out")
    let res1 = try inFile("d_hexdump_\(cand).in")
    try await run(output: x1, args: "-d", res1 )
  }
  
  @Test func n_flag() async throws {
    // Write your test here and use APIs like `#expect(...)` to check expected conditions.
    let x1 = try fileContents("d_hexdump_nflag_a.out")
    let res1 = try fileContents("d_hexdump_a.in")
    try await run(withStdin: res1, output: x1, args: "-bn", "1" )
  }
  
  @Test(arguments: ["a", "b", "c"]) func o_flag(_ cand : String) async throws {
    let endian = "el"
    let x1 = try fileContents("d_hexdump_oflag_\(cand)_\(endian).out")
    let res1 = try fileContents("d_hexdump_\(cand).in")
    try await run(withStdin: res1, output: x1, args: "-o" )
  }
  
  @Test func s_flag() async throws {
    let x1 = try fileContents("d_hexdump_sflag_a.out")
    let res1 = try inFile("d_hexdump_a.in")
    try await run(output: x1, args: "-bs", "4", res1 )
    
    // FIXME: check to make sure that the output is not empty
    try await run(args: "-n", "100", "-s", "1024", "/dev/random")
    //    #expect(j2 != nil && !j2!.isEmpty)
  }
  
  @Test(arguments: 0...7, ["-s", "-vs"]) func v_flag(_ i : Int, _ f : String) async throws {
    let res1 = try inFile("d_hexdump_c.in")
    for i in 0...7 {
      let p = ShellProcess(cmd, f, "\(i)", res1)
      let (_, j1, _) = try await p.run()
      let k1 = j1!.components(separatedBy: "\n")
      if f == "-s" {
        #expect(k1.contains("*"))
      } else {
        #expect(!k1.contains("*"))
      }
    }
  }
  
  @Test(arguments: ["-s", "-vs"]) func v_flag8(_ f : String) async throws {
    let res1 = try inFile("d_hexdump_c.in")
    let p = ShellProcess(cmd, f, "8", res1)
    let (_, j1, _) = try await p.run()
    let k1 = j1!.components(separatedBy: "\n")
    #expect(!k1.contains("*"))
  }

  @Test(arguments: ["a", "b", "c"]) func x_flag(_ cand : String) async throws {
    let endian = "el"

    let x1 = try fileContents("d_hexdump_xflag_\(cand)_\(endian).out")
    let res1 = try fileContents("d_hexdump_\(cand).in")
    try await run(withStdin: res1, output: x1, args: "-x")
  }

  @Test func no_conv_err() async throws {
    try await run(status: 1, error: /missing conversion character/, args: "-e", "\"%\"")

    try await run(status: 1, error: /missing conversion character/, args: "-e", "4/2 \"%\"")
  }

  // FIXME: need to add the od tests
}
