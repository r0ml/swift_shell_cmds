
// Generated by Robert M. Lefkowitz <r0ml@liberally.net> in 2024
// from a file containing the following notice:

/*
  Copyright (c) 2022-2023 Klara, Inc.

  SPDX-License-Identifier: BSD-2-Clause
*/

import Testing
import testSupport
import Foundation

@Suite("renice", .serialized) struct reniceTest {

  @Test("Set a process's nice number to an absolute value") func abs_pid() throws {
    let pid = run_test_process()
    let prio = Int(getpriority(PRIO_PROCESS, UInt32(pid)))
    let incr = 3
    
    let (c, _, _) = try captureStdoutLaunch(Clem.self, "renice", [String(prio+incr), String(pid)], nil)
    #expect(c == 0)
    
    let nprio = Int(getpriority(PRIO_PROCESS, UInt32(pid)))
    #expect(nprio == prio+incr)
    
    kill_process(pid)
  }
  
  
  @Test("Change a process's nice number by a relative value") func rel_pid() throws {
    let pid = run_test_process()
    let prio = Int(getpriority(PRIO_PROCESS, UInt32(pid)))
    let incr = 3
    
    let (c1, _, _) = try captureStdoutLaunch(Clem.self, "renice", ["-n", String(incr), String(pid)], nil)
    let (c2, _, _) = try captureStdoutLaunch(Clem.self, "renice", ["-p", "-n", String(incr), String(pid)], nil)
    let (c3, _, _) = try captureStdoutLaunch(Clem.self, "renice", ["-n", String(incr), "-p", String(pid)], nil)

    #expect(c1 == 0 && c2 == 0 && c3 == 0)
    
    let nprio = Int(getpriority(PRIO_PROCESS, UInt32(pid)))
    #expect(nprio == prio+incr+incr+incr)

    kill_process(pid)
    
  }

  @Test("Set a process group's nice number to an absolute value") func abs_pgid() throws {
    let pid = run_test_process()
    let pgrp = UInt32(getpgid(pid))
    let prio = Int(getpriority(PRIO_PGRP, pgrp))
    let incr = 3
    
    let (c, _, _) = try captureStdoutLaunch(Clem.self, "renice", ["-g", String(prio+incr), String(pgrp)], nil)
    #expect(c == 0)
    
    let nprio = Int(getpriority(PRIO_PGRP, pgrp))
    #expect(nprio == prio+incr)
    
    kill_process(pid)
  }

  @Test("Change a process group's nice number by a relative value") func rel_pgid() throws {
    let pid = run_test_process()
    let pgrp = UInt32(getpgid(pid))
    let prio = Int(getpriority(PRIO_PGRP, pgrp))
    let incr = 3
    
    let (c1, _, _) = try captureStdoutLaunch(Clem.self, "renice", ["-g", "-n", String(incr), String(pgrp)])
    #expect(c1 == 0)

    let (c2, _, _) = try captureStdoutLaunch(Clem.self, "renice", ["-n", String(incr), "-g", String(pgrp)])
    #expect(c2 == 0)
    
    let nprio = Int(getpriority(PRIO_PGRP, pgrp))
    #expect(nprio == prio+incr+incr)
    
    kill_process(pid)
  }
  
  @Test("Set a user's processes nice numbers to an absolute value", .disabled("must have a test user account and run test as root")) func abs_user() throws {
    let prio = Int(getpriority(PRIO_PROCESS, 0))
    let incr = 3
    let test_user = "test_user"
    
    let pid = run_test_process() // launch a process and get it's pid
    
    let (c, _, _) = try captureStdoutLaunch(Clem.self, "renice", ["-u", "-n", String(prio+incr), test_user], nil)
    #expect(c == 0)
    
    let nprio = Int(getpriority(PRIO_PROCESS, UInt32(pid)))
    #expect(nprio == prio+incr)
  }
  
  @Test("Change a user's processes nice numbers by a relative value", .disabled("must have a test user account and run test as root")) func rel_user() throws {
    
  }
  
  @Test("Test various delimiter positions") func delim() throws {
    
    let pid = run_test_process()
    var incr = 0

    let nice = Int(getpriority(PRIO_PROCESS, UInt32(pid)))

    incr += 1
    let (_, _, _) = try captureStdoutLaunch(Clem.self, "renice", ["--", String(nice+incr), String(pid)])
    #expect( niceValue(pid) == nice+incr)

    incr += 1
    let (_, _, _) = try captureStdoutLaunch(Clem.self, "renice", [String(nice+incr), "--", String(pid)])
    #expect( niceValue(pid) == nice+incr)

    incr += 1
    let (_, _, _) = try captureStdoutLaunch(Clem.self, "renice", [String(nice+incr), String(pid), "--"])
    #expect( niceValue(pid) == nice+incr)

    incr += 1
    let (_, _, _) = try captureStdoutLaunch(Clem.self, "renice", ["-p", "--", String(nice+incr), String(pid)])
    #expect( niceValue(pid) == nice+incr)

    incr += 1
    let (_, _, _) = try captureStdoutLaunch(Clem.self, "renice", ["-p", String(nice+incr), "--", String(pid)])
    #expect( niceValue(pid) == nice+incr)

    incr += 1
    let (_, _, _) = try captureStdoutLaunch(Clem.self, "renice", ["-p", String(nice+incr), String(pid), "--"])
    #expect( niceValue(pid) == nice+incr)

    incr += 1
    let (_, _, _) = try captureStdoutLaunch(Clem.self, "renice", [String(nice+incr), "-p", "--", String(pid)])
    #expect( niceValue(pid) == nice+incr)

    incr += 1
    let (_, _, _) = try captureStdoutLaunch(Clem.self, "renice", [String(nice+incr), "-p", String(pid)], "--")
    #expect( niceValue(pid) == nice+incr)

    kill_process(pid)
    
  }
  
  @Test("Do not segfault if -n is given without an argument") func incr_noarg() throws {
    let (c, r, _) = try captureStdoutLaunch(Clem.self, "renice", ["-n"])
    #expect(c == 1 && r == "")
  }

  
  func run_test_process() -> Int32 {
    let process = Process()
    let execu = "/bin/sleep"
    
  //  print("launchPath \(execu)")
    
    process.launchPath = execu
    process.arguments = ["60"]
    process.launch()

    // run a test process (sleep 60 will do) to have a process we can check the nice value of
    return process.processIdentifier
  }
  
  func niceValue(_ pid: Int32) -> Int {
    return Int(getpriority(PRIO_PROCESS, UInt32(pid)))
  }
  
  func kill_process(_ pid : Int32) {
    kill(pid, SIGKILL)
  }
  
}
