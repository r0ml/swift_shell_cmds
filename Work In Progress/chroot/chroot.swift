
// Generated by Robert M. Lefkowitz <r0ml@liberally.net> in 2024 using ChatGPT
// from a file containing the following notice:

/*
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 1988, 1993
 *  The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/// Although this builds and runs, chroot is disallowed on macOS because of the hardened runtime.
/// The code is left here for historical reasons, but you shouldn't expect that it will do anything useful.

import Foundation
import CMigration

class CommandOptions {
  var userName: String?
  var groupName: String?
  var grouplist: String?
  var args : [String] = []
}

@main final class Chroot : ShellCommand {

  func parseOptions() throws(CmdErr) -> CommandOptions {
    var opts = CommandOptions()
    let go = BSDGetopt("G:g:u:")

    while let (ch, optarg) = try go.getopt() {
      switch(ch) {
        case "u":
          guard !optarg.isEmpty else { throw CmdErr(1) }
          opts.userName = optarg
        case "g":
          guard !optarg.isEmpty else { throw CmdErr(1) }
          opts.groupName = optarg
        case "G":
          guard !optarg.isEmpty else { throw CmdErr(1) }
          opts.grouplist = optarg
        default:
          throw CmdErr(1)
      }
    }

    opts.args = go.remaining
    if opts.args.count < 1 {
      throw CmdErr(1)
    }
    return opts
  }

  func runCommand(_ opts : CommandOptions) throws(CmdErr) {
    let cmd : String = opts.args[0]

    var this_gid_1 : gid_t = 0

    if let groupnam = opts.groupName {
      if let gf = groupnam.first, gf.isNumber ,
         let tg = gid_t(groupnam) {
        this_gid_1 = tg
      } else {
        if let gp = getgrnam(groupnam) {
          this_gid_1 = gp.pointee.gr_gid
        } else {
          err(1, "no such group `\(groupnam)'")
        }
      }
    }

    var gidlist : [gid_t] = []
    if let grpls = opts.grouplist {
      let gl = grpls.components(separatedBy: ",")

      for p in gl {
        //        p = strsep(&grouplist, ",")
        //        guard let p else { continue }
        if p.isEmpty {
          continue
        }

        var this_gid : gid_t = 0

        if p.first!.isNumber,
           let tg = gid_t(p) { //  strtoul(p, &endp, 0))
          this_gid = tg
        } else {
          if let gp = getgrnam(p) {
            this_gid = gp.pointee.gr_gid
          } else {
            err(1, "no such group `\(p)'")
          }
        }
        gidlist.append(this_gid)
      }
    }

    var this_uid : uid_t = 0

    if let usernam = opts.userName, !usernam.isEmpty {
      if usernam.first!.isNumber,
         let tu = uid_t( usernam ) {
        this_uid = tu
      } else {
        if let pw = getpwnam(usernam) {
          this_uid = pw.pointee.pw_uid
        } else {
          err(1, "no such user `\(usernam)'")
        }
      }
    }

    print(cmd)
    if chdir(cmd) == -1 || chroot(".") == -1 {
      err(1, cmd)
    }

    if gidlist.count != 0 && setgroups( Int32(gidlist.count), gidlist) == -1 {
      err(1, "setgroups")
    }

    if opts.groupName != nil && setgid(this_gid_1) == -1 {
      err(1, "setgid")
    }

    if opts.userName != nil && setuid(this_uid) == -1 {
      err(1, "setuid")
    }

    try! print( FileManager.default.contentsOfDirectory(atPath: "."))

    if opts.args.count > 1 {
      let evpa = opts.args.dropFirst().map { strdup($0) }
      execvp(opts.args[1], evpa) //  &argv[1])
      err(1, opts.args[1])
    }

    var shell : String = _PATH_BSHELL
    if let ge = getenv("SHELL") {
      shell = String(cString: ge)
    }

    var a : [UnsafeMutablePointer<CChar>?] = []
    shell.withCString { a.append( UnsafeMutablePointer(mutating: $0 ) ) }
    "-i".withCString { a.append( UnsafeMutablePointer(mutating: $0 ) ) }
    a.append(nil)
    execvp(shell, &a)
    err(1, shell)
  }

  var usage = "usage: chroot [-g group] [-G group,group,...] [-u user] newroot [command]"

}
