
// Generated by Robert M. Lefkowitz <r0ml@liberally.net> in 2024 using ChatGPT
// from a file containing the following notice:

/*
 * Copyright (c) 1980, 1993
 *  The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

import Foundation
import shared

///to turn accounting on, use   sudo accton /var/account/acct
///to turn it off, use  sudo accton
///then     sudo truncate -s 0 /var/account/acct
///
/*
struct acct {
    var ac_comm: [CChar]
    var ac_btime: time_t
    var ac_utime: u_int
    var ac_stime: u_int
    var ac_etime: u_int
    var ac_uid: uid_t
    var ac_tty: dev_t
    var ac_flag: Bool
}
*/

@main final class lastcomm : ShellCommand {
//  let _PATH_ACCT = "/var/account/acct"
  let ASU = 0x01
  let AFORK = 0x02
  let ACOMPAT = 0x04
  let ACORE = 0x08
  let AXSIG = 0x10
  let AHZ = 64
  let SECSPERHOUR = 3600
  let SECSPERMIN = 60
  let UT_NAMESIZE = 8
  let UT_LINESIZE = 8
  let NODEV = dev_t(-1)
  var args : ArraySlice<String> = []
  var acctfile = "/var/account/acct"

  func parseOptions() throws(CmdErr) {
    
    let go = BSDGetopt("f:w")
    while let (ch, optarg) = try go.getopt() {
      switch ch {
      case "f":
        acctfile = optarg
      case "w":
        break
      case "?":
        fallthrough
      default:
        throw CmdErr(1)
      }
    }
    
    args = ArraySlice(go.remaining)
  }
   
  func runCommand() throws(CmdErr) {
    var ab = acct()
    var sb = stat()
    
    guard let fp = fopen(acctfile, "r"),
          fstat(fileno(fp), &sb) == 0 else {
      throw CmdErr(1, acctfile)
//      return 1
    }
    
    let sz = MemoryLayout<acct>.size
    
    var size = Int(sb.st_size) - Int(sb.st_size) % sz
    
    if size < sz {
      return
    }
    
    size -= sz
    if fseeko(fp, off_t(size), SEEK_SET) == -1 {
      err(1, acctfile)
    }
    
    let lwidth = MemoryLayout.size(ofValue: ab.ac_comm)
    
    while true {
      if fread(&ab, sz, 1, fp) != 1 {
        err(1, acctfile)
      }
      
      var acom = withUnsafeBytes(of: ab.ac_comm) {p in
        String(cString: p.assumingMemoryBound(to: CChar.self).baseAddress!)
      }

      if acom.isEmpty { acom = "?" }
      
      acom = String(acom.map { (isprint( Int32($0.unicodeScalars.first!.value)) != 0) ? $0 : "?"})
      
      if args.isEmpty || requested(argv: args, acp: &ab) {
        let t = expand(t: ab.ac_utime) + expand(t: ab.ac_stime)
        var timelong : Int = Int(ab.ac_btime)
        let timeString = String(cString: ctime(&timelong))
        let delta = Double(expand(t: ab.ac_etime)) / Double(AHZ)
        let hours = floor(delta / Double(SECSPERHOUR))
        let minutes = floor(fmod(delta, Double(SECSPERHOUR)) / Double(SECSPERMIN))
        let seconds = fmod(delta, Double(SECSPERMIN))
        
        let tt = String(format: " (%1.0f:%02.0f:%05.2f)", hours, minutes, seconds)
        let ss = String(format: "%6.2f secs", Double(t)/Double(AHZ))
        print("\(take(lwidth, from: acom)) \(flagbits(f: Int(ab.ac_flag))) \(take(UT_NAMESIZE, from: String(cString: user_from_uid(ab.ac_uid, 0)!))) \(take(UT_LINESIZE, from: getdev(dev: ab.ac_tty))) \(ss) \(take(16, from: timeString)) \(tt)")
      }
      
      if size == 0 {
        break
      }
      
      if fseeko(fp, 2 * -off_t(MemoryLayout<acct>.size), SEEK_CUR) == -1 {
        err(1, acctfile)
      }
      
      size -= MemoryLayout<acct>.size
    }
  }
  
  func expand(t: UInt16) -> time_t {
    var nt: time_t = time_t(t & 017777)
    var t = t >> 13
    while t > 0 {
      t -= 1
      nt <<= 3
    }
    return nt
  }
  
  func flagbits(f: Int) -> String {
    var flags = "-"
    if f & ASU != 0 { flags += "S" }
    if f & AFORK != 0 { flags += "F" }
    if f & ACOMPAT != 0 { flags += "C" }
    if f & ACORE != 0 { flags += "D" }
    if f & AXSIG != 0 { flags += "X" }
    return take(8, from: flags)
  }
  
  func requested(argv: ArraySlice<String>, acp: inout acct) -> Bool {
    for arg in argv {
      var user = "?"
      if let uu = user_from_uid(acp.ac_uid, 0) {
        user = String(cString: uu)
      }
      if user == arg {
        return true
      }
      if getdev(dev: acp.ac_tty) == arg {
        return true
      }
      
      let acom = withUnsafeBytes(of: acp.ac_comm) {p in
        String(cString: p.assumingMemoryBound(to: CChar.self).baseAddress!)
      }
      if acom.hasPrefix(arg) {
        return true
      }
    }
    return false
  }
  
  func getdev(dev: dev_t) -> String {
    if dev == NODEV {
      return "__"
    }
    if let lastname = devname(dev, S_IFCHR) {
      return String(cString: lastname)
    }
    return "??"
  }
  
  var usage = "Usage: \(getprogname()!) [-w] [-f file] [command ...] [user ...] [terminal ...]"
  
  func take(_ n : Int, from s : String) -> String {
    if n >= s.count {
      return s.appending(String(repeating: " ", count: n-s.count))
    } else {
      return String(s[s.startIndex..<s.index(s.startIndex, offsetBy: n)])
    }
  }
}
