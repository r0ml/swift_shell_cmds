
// Generated by Robert M. Lefkowitz <r0ml@liberally.net> in 2024 using ChatGPT
// from a file containing the following notice:

/*
 * SPDX-License-Identifier: BSD-4-Clause
 *
 * Copyright (c) 1995 Wolfram Schneider <wosch@FreeBSD.org>. Berlin.
 * Copyright (c) 1989, 1993
 *  The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * James A. Woods.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *  This product includes software developed by the University of
 *  California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD$
 */

import Foundation

/*
 *  bigram < sorted_file_names | sort -nr |
 *      awk 'NR <= 128 { printf $2 }' > bigrams
 *
 * List bigrams for 'updatedb' script.
 * Use 'code' to encode a file using this output.
 */

#if !os(macOS)
import CapsicumHelpers
#endif
import Darwin

let MAXPATHLEN = 1024
let ASCII_MIN = 0
let ASCII_MAX = 255

var buf1 = [UInt8](repeating: 32, count: MAXPATHLEN)
var buf2 = [UInt8](repeating: 0, count: MAXPATHLEN)
var bigram = Array(repeating: Array(repeating: 0, count: ASCII_MAX + 1), count: ASCII_MAX + 1)

var oldpath = buf1
var path = buf2

#if !os(macOS)
if caph_limit_stdio() < 0 || caph_enter() < 0 {
    perror("capsicum")
    exit(1)
}
#endif

while let line = readLine() {
    path = Array(line.utf8)

    var cp = path.startIndex
    var oldpathIndex = oldpath.startIndex
    while cp != path.endIndex && oldpathIndex != oldpath.endIndex && path[cp] == oldpath[oldpathIndex] {
        cp = path.index(after: cp)
        oldpathIndex = oldpath.index(after: oldpathIndex)
    }

    while cp != path.endIndex && path.index(after: cp) != path.endIndex {
        bigram[Int(path[cp])][Int(path[path.index(after: cp)])] += 1
        cp = path.index(cp, offsetBy: 2)
    }

    if path == buf1 {
        path = buf2
        oldpath = buf1
    } else {
        path = buf1
        oldpath = buf2
    }
}

for i in ASCII_MIN...ASCII_MAX {
    for j in ASCII_MIN...ASCII_MAX {
        if bigram[i][j] != 0 {
            print(String(format: "%4u %c%c", bigram[i][j], i, j))
        }
    }
}

exit(0)
