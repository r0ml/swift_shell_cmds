
// Generated by Robert M. Lefkowitz <r0ml@liberally.net> in 2024 using ChatGPT
// from a file containing the following notice:

/*-
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 1992, 1993, 1994
 *  The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

import Foundation

func cmdpart(arg0: String) -> String {
    if let range = arg0.range(of: "/", options: .backwards) {
        return String(arg0[range.upperBound...])
    } else {
        return arg0
    }
}

func shquote(argv: inout [String]) -> String {
    let argMax: Int
    var bufSize: Int
    var len: Int
    var dst: String
    var buf: String? = nil

    if buf == nil {
        argMax = Int(sysconf(_SC_ARG_MAX))
        if argMax == -1 {
            fatalError("sysconf _SC_ARG_MAX failed")
        }
        if argMax >= Int.max / 4 || argMax >= Int.max / 4 {
            fatalError("sysconf _SC_ARG_MAX preposterously large")
        }
        bufSize = 4 * argMax + 1
        buf = String(repeating: "\0", count: bufSize)
    }

    if argv.isEmpty {
        buf = ""
        return buf!
    }
    dst = buf!
    for src in argv {
        if src.isEmpty {
            continue
        }
        len = (bufSize - 1 - dst.count) / 4
        let visLen = min(src.count, len)
        dst += src.prefix(visLen)
        while !dst.isEmpty {
            dst.removeFirst()
        }
        if (bufSize - 1 - dst.count) / 4 > 0 {
            dst += " "
        }
    }
    if !dst.isEmpty && dst.last == " " {
        dst.removeLast()
    }
    return dst
}

func fmt_argv(argv: inout [String], cmd: String, thread: String, maxlen: Int) -> String {
    var len: Int
    var ap: String?
    var cp: String

    if argv.isEmpty || argv[0].isEmpty {
        if cmd.isEmpty {
            return ""
        }
        ap = nil
        len = maxlen + 3
    } else {
        ap = shquote(argv: &argv)
        len = ap!.count + maxlen + 4
    }
    cp = String(repeating: "\0", count: len)
    if ap == nil {
        if thread != nil {
            ap = "\(cmd)/\(thread)"
            cp = "[\(ap!.prefix(maxlen))]"
        } else {
            cp = "[\(cmd.prefix(maxlen))]"
        }
    } else if cmdpart(arg0: argv[0]) != cmd {
        cp = "\(ap!) (\(cmd.prefix(maxlen)))"
    } else {
        cp = ap!
    }
    return cp
}
