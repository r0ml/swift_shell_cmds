
// Generated by Robert M. Lefkowitz <r0ml@liberally.net> in 2024 using ChatGPT
// from a file containing the following notice:

/*-
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 1990, 1993, 1994
 *  The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
import Foundation

extension w {
  /*
   * pr_attime --
   *  Print the time since the user logged in.
   */
  func pr_attime(started: inout time_t, now: inout time_t) -> Int {
    var buf = Array<wchar_t>(repeating: 0, count: 256)
    var tp = tm(), tm = tm()
    let diff: time_t
    var fmt: String?
    var len: Int, width: Int, offset = 0
    
    tp = localtime(&started).pointee
    tm = localtime(&now).pointee
    diff = now - started
    
    /* If more than a week, use day-month-year. */
    if diff > 86400 * 7 {
      fmt = "%d%b%y"
    }
    
    /* If not today, use day-hour-am/pm. */
    else if tm.tm_mday != tp.tm_mday ||
              tm.tm_mon != tp.tm_mon ||
              tm.tm_year != tp.tm_year {
      fmt = use_ampm ? "%a%I%p" : "%a%H"
    }
    
    /* Default is hh:mm{am,pm}. */
    else {
      fmt = use_ampm ? "%l:%M%p" : "%k:%M"
    }
    
    wcsftime(&buf, buf.count, fmt, &tp)
    len = wcslen(buf)
    width = wcswidth(buf, len)
    xo_attr("since", "%lu", UInt(started))
    xo_attr("delta", "%lu", UInt(diff))
    if len == width {
      xo_emit("{:login-time/%-7.7ls/%ls}", buf)
    } else if width < 7 {
      xo_emit("{:login-time/%ls}%.*s", buf, 7 - width, "      ")
    } else {
      xo_emit("{:login-time/%ls}", buf)
      offset = width - 7
    }
    return offset
  }
  
  /*
   * pr_idle --
   *  Display the idle time.
   *  Returns number of excess characters that were used for long idle time.
   */
  func pr_idle(idle: time_t) -> Int {
    /* If idle more than 36 hours, print as a number of days. */
    if idle >= 36 * 3600 {
      let days = idle / 86400
      xo_emit(" {:idle/%dday%s} ", days, days > 1 ? "s" : " " )
      if days >= 100 {
        return 2
      }
      if days >= 10 {
        return 1
      }
    }
    
    /* If idle more than an hour, print as HH:MM. */
    else if idle >= 3600 {
      xo_emit(" {:idle/%2d:%02d/} ",
              Int(idle / 3600), Int((idle % 3600) / 60))
    }
    
    else if idle / 60 == 0 {
      xo_emit("     - ")
    }
    
    /* Else print the minutes idle. */
    else {
      xo_emit("    {:idle/%2d} ", Int(idle / 60))
    }
    
    return 0 /* not idle longer than 9 days */
  }
}
