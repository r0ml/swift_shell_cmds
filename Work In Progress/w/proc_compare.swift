
// Generated by Robert M. Lefkowitz <r0ml@liberally.net> in 2024 using ChatGPT
// from a file containing the following notice:

/*-
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 1990, 1993
 *  The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

import Foundation

// Swift doesn't have direct equivalents for the C libraries and system calls used in the provided C code. However, the logic of the `proc_compare` function can be translated into Swift. Here's a simplified version of the function that compares two hypothetical `Process` objects:

struct Process {
    var isRunning: Bool
    var cpuUsage: Int
    var pid: Int
    var isZombie: Bool
    var sleepTime: Int
}

func proc_compare(p1: Process?, p2: Process?) -> Int {
    guard let p1 = p1 else { return 1 }

    switch (p1.isRunning, p2?.isRunning) {
    case (true, false):
        return 0
    case (false, true):
        return 1
    case (true, true):
        if p2!.cpuUsage > p1.cpuUsage {
            return 1
        }
        if p1.cpuUsage > p2!.cpuUsage {
            return 0
        }
        return p2!.pid > p1.pid ? 1 : 0
    default:
        break
    }

    switch (p1.isZombie, p2?.isZombie) {
    case (true, false):
        return 1
    case (false, true):
        return 0
    case (true, true):
        return p2!.pid > p1.pid ? 1 : 0
    default:
        break
    }

    if p2!.sleepTime > p1.sleepTime {
        return 0
    }
    if p1.sleepTime > p2!.sleepTime {
        return 1
    }

    return p2!.pid > p1.pid ? 1 : 0
}

// This Swift code assumes a `Process` struct with properties that correspond to the properties of the `kinfo_proc` struct in the C code. The `proc_compare` function then compares two `Process` objects based on the same criteria as the C function. Note that Swift doesn't have a direct equivalent for the `TDF_SINTR` flag, so that part of the comparison is omitted.
